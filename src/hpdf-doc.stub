;; -*- mode: scheme; coding:utf-8 -*-

;;;
;;; hpdf-doc.stub
;;;

"
#include \"gauche-hpdf.h\"
#include <hpdf.h>
#include <hpdf_consts.h>
#include <hpdf_types.h>
#include <hpdf_objects.h>
"

(include "gauche-hpdf.types")

(define-cproc hpdf-get-version () ::<const-cstring>
  (result (HPDF_GetVersion)))

(define-cproc hpdf-new
  (&optional callback) ::<hpdf-doc>
  (let* ([doc::ScmHpdfDoc*  (SCM_NEW ScmHpdfDoc)])
    (.if DEBUG (GAUCHE_HPDF_FUNC "hpdf-new"))
    (SCM_SET_CLASS doc SCM_CLASS_HPDF_DOC)
    (if (SCM_CLOSUREP callback)
        (set! (-> doc h)
	      (HPDF_New hpdf_error_handler (-> (SCM_FOREIGN_POINTER callback) ptr)))
	;; else 
        (set! (-> doc h) (HPDF_New hpdf_error_handler NULL)))
    (result doc)))

(define-cproc hpdf-free (doc::<hpdf-doc>) ::<void>
  (let* ()
    (.if DEBUG (GAUCHE_HPDF_FUNC "hpdf-free"))
    (HPDF_Free (-> doc h))
    (set! (-> doc h) NULL)))

(define-cproc hpdf-new-doc (doc::<hpdf-doc>) ::<ulong>
  (let* ()
    (.if DEBUG (GAUCHE_HPDF_FUNC "hpdf-new-doc"))
    (result (HPDF_NewDoc (-> doc h)))))

(define-cproc hpdf-has-doc (doc::<hpdf-doc>) ::<boolean>
  (let* ()
    (.if DEBUG (GAUCHE_HPDF_FUNC "hpdf-has-doc"))
    (result (HPDF_HasDoc (-> doc h)))))

(define-cproc hpdf-free-doc (doc::<hpdf-doc>) ::<void>
  (let* ()
    (.if DEBUG (GAUCHE_HPDF_FUNC "hpdf-free-doc"))
    (HPDF_FreeDoc (-> doc h))))

(define-cproc hpdf-free-doc-all (doc::<hpdf-doc>) ::<void>
  (let* ()
    (.if DEBUG (GAUCHE_HPDF_FUNC "hpdf-free-doc-all"))
    (HPDF_FreeDocAll (-> doc h))))


(define-cproc hpdf-get-stream-size
  (doc::<hpdf-doc>) ::<uint32>
  (let* ()
    (.if DEBUG (GAUCHE_HPDF_FUNC "hpdf-get-stream-size"))
    (result (HPDF_GetStreamSize (-> doc h)))))

;; FIXME use port?
;;(define-cproc hpdf-readfromstream (doc::<hpdf-doc> buf size)
;;  (body <ulong> "SCM_RESULT = HPDF_ReadFromStream(doc->h, buf, size);"))

(define-cproc hpdf-reset-stream (doc::<hpdf-doc>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-reset-stream\");"
        "SCM_RESULT = HPDF_ResetStream(doc->h);"))

(define-cproc hpdf-save-to-file
  (doc::<hpdf-doc> name::<const-cstring>) ::<int>
  (let* ()
    (.if DEBUG (GAUCHE_HPDF_FUNC "hpdf-save-to-file"))
    (result (HPDF_SaveToFile (-> doc h) name))))

(define-cproc hpdf-get-error (doc::<hpdf-doc>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-get-error\");"
        "SCM_RESULT = HPDF_GetError(doc->h);"))

(define-cproc hpdf-get-error-detail (doc::<hpdf-doc>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-get-error-detail\");"
        "SCM_RESULT = HPDF_GetErrorDetail(doc->h);"))

(define-cproc hpdf-reset-error (doc::<hpdf-doc>)
  (body <void>
        "GAUCHE_HPDF_FUNC(\"hpdf-reset-error\");"
        "HPDF_ResetError(doc->h);"))

(define-cproc hpdf-set-page-configuration (doc::<hpdf-doc> page_per_pages::<uint>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-set-page-configuration\");"
        "SCM_RESULT = HPDF_SetPagesConfiguration(doc->h, page_per_pages);"))

(define-cproc hpdf-get-page-by-index (doc::<hpdf-doc> index::<uint>)
  (body <hpdf-page>
        "GAUCHE_HPDF_FUNC(\"hpdf-get-page-by-index\");"
        "  ScmHpdfPage *h = SCM_NEW(ScmHpdfPage);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_PAGE);
  h->h = HPDF_GetPageByIndex(doc->h, index);
  SCM_RESULT = h;"))
