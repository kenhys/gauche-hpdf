;; -*- mode: scheme; coding:utf-8 -*-

;;;
;;; hpdf-u3d.stub
;;;


"
#include \"gauche-hpdf.h\"
#include <hpdf.h>
#include <hpdf_u3d.h>
#include <hpdf_consts.h>
#include <hpdf_types.h>
#include <hpdf_objects.h>

"

(include "gauche-hpdf.types")

;;
;; The following entry is a procedure
;;


;;; 
;;; from hpdf_u3d.h
;;;

;; HPDF_EXPORT(HPDF_JavaScript) HPDF_CreateJavaScript(HPDF_Doc pdf, const char *code);


(define-cproc hpdf-load-u3d-from-file
   (pdf::<hpdf-doc> filename::<const-cstring>) ::<hpdf-image>
   (let* ([image::ScmHpdfImage* (SCM_NEW ScmHpdfImage)])
     (.if DEBUG (GAUCHE_HPDF_FUNC "hpdf-load-u3d-from-file"))
     (SCM_SET_CLASS image SCM_CLASS_HPDF_IMAGE)
     (set! (-> image h) (HPDF_LoadU3DFromFile (-> pdf h) filename))
     (result image)))

;;
;; 
(define-cproc hpdf-create-3dview 
  (u3d::<hpdf-image> name::<const-cstring>) ::<hpdf-dict>
  (let* ([view::ScmHpdfDict* (SCM_NEW ScmHpdfDict)]
	 [u3d-c::HPDF_U3D NULL]
	 [mmgr::HPDF_MMgr NULL])
    (.if DEBUG (GAUCHE_HPDF_FUNC "hpdf-create-3d-view"))
     (SCM_SET_CLASS view SCM_CLASS_HPDF_DICT)
     (set! u3d-c (-> u3d h))
    "mmgr = u3d_c.mmgr;"
    "view->h = HPDF_Create3DView(u3d_c.mmgr, name);"
    (result view)))

(define-cproc hpdf-u3d-add-3dview
  (u3d::<hpdf-image> view::<hpdf-dict>) ::<hpdf-status>
  (let* ()
    (result (HPDF_U3D_Add3DView (-> u3d h) (-> view h)))))

(define-cproc hpdf-u3d-set-default-3d-view
  (u3d::<hpdf-image> name::<const-cstring>) ::<hpdf-status>
  (let* ()
    (result (HPDF_U3D_SetDefault3DView (-> u3d h) name))))

;; HPDF_EXPORT(HPDF_STATUS) HPDF_U3D_AddOnInstanciate(HPDF_U3D u3d, HPDF_JavaScript javaScript);

;; HPDF_EXPORT(HPDF_STATUS) HPDF_3DView_AddNode(HPDF_Dict view, const char *name, HPDF_REAL opacity, HPDF_BOOL visible);
(define-cproc hpdf-3dview-add-node
  (view::<hpdf-dict>
   name::<const-cstring> opacity::<real> visible::<boolean>) ::<hpdf-status>
  (let* ()
    (result (HPDF_3DView_AddNode (-> view h) name opacity visible))))

;; HPDF_EXPORT(HPDF_STATUS) HPDF_3DView_SetLighting(HPDF_Dict view, const char *scheme);
(define-cproc hpdf-3dview-set-lighting
  (view::<hpdf-dict> scheme::<const-cstring>) ::<hpdf-status>
  (let* ()
    (result (HPDF_3DView_SetLighting (-> view h) scheme))))

;; HPDF_EXPORT(HPDF_STATUS) HPDF_3DView_SetBackgroundColor(HPDF_Dict view, HPDF_REAL r, HPDF_REAL g, HPDF_REAL b);
(define-cproc hpdf-3dview-set-background-color
  (view::<hpdf-dict> r::<real> g::<real> b::<real>) ::<hpdf-status>
  (let* ()
    (result (HPDF_3DView_SetBackgroundColor
	     (-> view h) r g b))))

;; HPDF_EXPORT(HPDF_STATUS) HPDF_3DView_SetPerspectiveProjection(HPDF_Dict view, HPDF_REAL fov);
(define-cproc hpdf-3dview-set-perspective-projection
  (view::<hpdf-dict> fov::<real>) ::<hpdf-status>
  (let* ()
    (result (HPDF_3DView_SetPerspectiveProjection
	     (-> view h) fov))))

;; HPDF_EXPORT(HPDF_STATUS) HPDF_3DView_SetOrthogonalProjection(HPDF_Dict view, HPDF_REAL mag);

;; HPDF_EXPORT(HPDF_STATUS) HPDF_3DView_SetCamera(HPDF_Dict view, HPDF_REAL coox, HPDF_REAL cooy, HPDF_REAL cooz, HPDF_REAL c2cx, HPDF_REAL c2cy, HPDF_REAL c2cz, HPDF_REAL roo, HPDF_REAL roll);
(define-cproc hpdf-3dview-set-camera
  (view::<hpdf-dict> 
   coox::<real> cooy::<real> cooz::<real>
   c2cx::<real> c2cy::<real> c2cz::<real>
   roo::<real> roll::<real>) ::<hpdf-status>
  (let* ()
    (result (HPDF_3DView_SetCamera 
	     (-> view h) coox cooy cooz c2cx c2cy c2cz roo roll))))
				   
   
;;;
;;; hpdf.h
;;;
(define-cproc hpdf-page-create-3d-c3d-measure
  (page::<hpdf-page>
   first::<hpdf-point3d>
   anchor::<hpdf-point3d>) ::<hpdf-3d-measure>
   (let* ([measure::ScmHpdf3DMeasure* (SCM_NEW ScmHpdf3DMeasure)])
     (.if DEBUG (GAUCHE_HPDF_FUNC "hpdf-page-create-3d-c3d-measure"))
     (SCM_SET_CLASS measure SCM_CLASS_HPDF3DMEASURE)
     (set! (-> measure h) (HPDF_Page_Create3DC3DMeasure
			   (-> page h) (-> first h) (-> anchor h)))
     (result measure)))

(define-cproc hpdf-page-create-pd3-3d-measure
  (page::<hpdf-page>
   annot::<hpdf-point3d>
   first::<hpdf-point3d>
   second::<hpdf-point3d>
   leader::<hpdf-point3d>
   measurement::<hpdf-point3d>
   ydirection::<hpdf-point3d>
   value::<real>
   units::<const-cstring>) ::<hpdf-3d-measure>
   (let* ([measure::ScmHpdf3DMeasure* (SCM_NEW ScmHpdf3DMeasure)])
     (.if DEBUG (GAUCHE_HPDF_FUNC "hpdf-page-create-pd3-c3d-measure"))
     (SCM_SET_CLASS measure SCM_CLASS_HPDF3DMEASURE)
     (set! (-> measure h) (HPDF_Page_CreatePD33DMeasure
			   (-> page h) (-> annot h) (-> first h)
			   (-> second h) (-> leader h) (-> measurement h)
			   (-> ydirection h) value units))
     (result measure)))

(define-cproc hpdf-3d-measure-set-name
  (measure::<hpdf-3d-measure>
   name::<const-cstring>) ::<ulong>
   (let* ()
     (result (HPDF_3DMeasure_SetName (-> measure h) name))))

(define-cproc hpdf-3d-measure-set-color
  (measure::<hpdf-3d-measure>
   color::<hpdf-rgbcolor>) ::<ulong>
   (let* ()
     (result (HPDF_3DMeasure_SetColor (-> measure h) (-> color h)))))

(define-cproc hpdf-3d-measure-set-text-size
  (measure::<hpdf-3d-measure>
   textsize::<real>) ::<ulong>
   (let* ()
     (result (HPDF_3DMeasure_SetTextSize (-> measure h) textsize))))

(define-cproc hpdf-3d-c3d-measure-set-text-box-size
  (measure::<hpdf-3d-measure>
   x::<int>
   y::<int>) ::<ulong>
   (let* ()
     (result (HPDF_3DC3DMeasure_SetTextBoxSize 
	      (-> measure h) x y))))

(define-cproc hpdf-3dc3d-measure-set-text
  (measure::<hpdf-3d-measure>
   text::<const-cstring>
   encoder::<hpdf-encoder>) ::<ulong>
   (let* ()
     (result (HPDF_3DC3DMeasure_SetText (-> measure h)
					text (-> encoder h)))))

(define-cproc hpdf-3d-c3d-measure-set-projection-annotation
  (measure::<hpdf-3d-measure>
   annot::<hpdf-annotation>) ::<ulong>
   (let* ()
     (result (HPDF_3DC3DMeasure_SetProjectionAnotation
	      (-> measure h) (-> annot h)))))

(define-cproc hpdf-page-create-3d-annot-exdata
  (page::<hpdf-page>) ::<hpdf-exdata>
  (let* ([exdata::ScmHpdfExData* (SCM_NEW ScmHpdfExData)])
    (.if DEBUG (GAUCHE_HPDF_FUNC "hpdf-page-create-3d-annot-exdata"))
    (SCM_SET_CLASS exdata SCM_CLASS_HPDFEXDATA)
    (set! (-> exdata h) (HPDF_Page_Create3DAnnotExData (-> page h)))
    (result exdata)))

(define-cproc hpdf-3d-annot-exdata-set-3d-measurement
  (exdata::<hpdf-exdata>
   measure::<hpdf-3d-measure>) ::<hpdf-status>
  (let* ()
    (result (HPDF_3DAnnotExData_Set3DMeasurement (-> exdata h) (-> measure h)))))

(define-cproc hpdf-page-create-3dview
  (page::<hpdf-page>
   u3d::<hpdf-u3d>
   annot3d::<hpdf-annotation>
   name::<const-cstring>) ::<hpdf-dict>
   (let* ([dict::ScmHpdfDict* (SCM_NEW ScmHpdfDict)])
     (.if DEBUG (GAUCHE_HPDF_FUNC "hpdf-page-create-3dview"))
     (SCM_SET_CLASS dict SCM_CLASS_HPDF_DICT)
     (set! (-> dict h) (HPDF_Page_Create3DView (-> page h) (-> u3d h)
					       (-> annot3d h) name))
     (result dict)))

(define-cproc hpdf-3dview-add-3d-c3d-measure
  (view::<hpdf-dict>
   measure::<hpdf-3d-measure>) ::<ulong>
   (let* ()
     (result (HPDF_3DView_Add3DC3DMeasure 
	      (-> view h) (-> measure h)))))

;; Local variables:
;; mode: scheme
;; end:
