;; -*- mode: scheme; coding:utf-8 -*-

;;;
;;; hpdflib.stub
;;;

"
#include \"gauche-hpdf.h\"
#include <hpdf.h>
#include <hpdf_consts.h>
#include <hpdf_types.h>
#include <hpdf_objects.h>
"
(define-cclass <hpdf-doc> :base "ScmHpdfDoc*" "Scm_HpdfDocClass"
  ()
  ()
  [allocator
   (let* ([ctx::ScmHpdfDoc* (SCM_ALLOCATE ScmHpdfDoc klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])

(define-cclass <hpdf-page> :base "ScmHpdfPage*" "Scm_HpdfPageClass"
  ()
  ()
  [allocator
   (let* ([ctx::ScmHpdfPage* (SCM_ALLOCATE ScmHpdfPage klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])

(define-cclass <hpdf-pages> :base "ScmHpdfPages*" "Scm_HpdfPagesClass"
()
())
(define-cclass <hpdf-stream> :base "ScmHpdfStream*" "Scm_HpdfStreamClass"
()
())
(define-cclass <hpdf-image> :base "ScmHpdfImage*" "Scm_HpdfImageClass"
()
())
(define-cclass <hpdf-font> :base "ScmHpdfFont*" "Scm_HpdfFontClass"
()
())
(define-cclass <hpdf-outline> :base "ScmHpdfOutline*" "Scm_HpdfOutlineClass"
()
())
(define-cclass <hpdf-encoder> :base "ScmHpdfEncoder*" "Scm_HpdfEncoderClass"
  ()
  ()
  [allocator
   (let* ([ctx::ScmHpdfEncoder* (SCM_ALLOCATE ScmHpdfEncoder klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])

(define-cclass <hpdf-destination> :base "ScmHpdfDestination*" "Scm_HpdfDestinationClass"
()
())

(define-cclass <hpdf-xobject> :base "ScmHpdfXObject*" "Scm_HpdfXObjectClass"
  ()
  ()
  [allocator
   (let* ([ctx::ScmHpdfXObject* (SCM_ALLOCATE ScmHpdfXObject klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])

(define-cclass <hpdf-annotation> :base "ScmHpdfAnnotation*" "Scm_HpdfAnnotationClass"
  ()
  ()
  [allocator
   (let* ([ctx::ScmHpdfAnnotation* (SCM_ALLOCATE ScmHpdfAnnotation klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])

(define-cclass <hpdf-extgstate> :base "ScmHpdfExtGState*" "Scm_HpdfExtGStateClass"
()
())

(define-cclass <hpdf-point>
  :base "ScmHpdfPoint*" "Scm_HpdfPointClass"
  ()
  [;; slot
   (x :type <real> :c-name "h.x")
   (y :type <real> :c-name "h.y")]
  [allocator
   (let* ([ctx::ScmHpdfPoint* (SCM_ALLOCATE ScmHpdfPoint klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])

(define-cclass <hpdf-point3d>
  :base "ScmHpdfPoint3D*" "Scm_HpdfPoint3DClass"
  ()
  [;; slot
   (x :type <real> :c-name "h.x")
   (y :type <real> :c-name "h.y")
   (z :type <real> :c-name "h.z")]
  [allocator
   (let* ([ctx::ScmHpdfPoint3D* (SCM_ALLOCATE ScmHpdfPoint3D klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])


(define-cclass <hpdf-rect>
  :base "ScmHpdfRect*" "Scm_HpdfRectClass"
  ()
  [;; slot
   (left :type <real> :c-name "h.left")
   (top :type <real> :c-name "h.top")
   (bottom :type <real> :c-name "h.bottom")
   (right :type <real> :c-name "h.right")]
  [allocator
   (let* ([ctx::ScmHpdfRect* (SCM_ALLOCATE ScmHpdfRect klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])


(define-cclass <hpdf-box>
  :base "ScmHpdfBox*" "Scm_HpdfBoxClass"
  ()
  [(left :type <real> :c-name "h.left")
   (top :type <real> :c-name "h.top")
   (bottom :type <real> :c-name "h.bottom")
   (right :type <real> :c-name "h.right")]
  [allocator
   (let* ([ctx::ScmHpdfBox* (SCM_ALLOCATE ScmHpdfBox klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])


(define-cclass <hpdf-transmatrix> "ScmHpdfTransMatrix*" "Scm_HpdfTransMatrixClass"
  ()
  ((a :type <real> :c-name "h.a")
   (b :type <real> :c-name "h.b")
   (c :type <real> :c-name "h.c")
   (d :type <real> :c-name "h.d")
   (x :type <real> :c-name "h.x")
   (y :type <real> :c-name "h.y"))
  [allocator
   (let* ([ctx::ScmHpdfTransMatrix* (SCM_ALLOCATE ScmHpdfTransMatrix klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])

(define-cclass <hpdf-rgbcolor> "ScmHpdfRGBColor*" "Scm_HpdfRGBColorClass"
  ()
  ((r :type <real> :c-name "h.r")
   (g :type <real> :c-name "h.g")
   (b :type <real> :c-name "h.b"))
  [allocator
   (let* ([ctx::ScmHpdfRGBColor* (SCM_ALLOCATE ScmHpdfRGBColor klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])

(define-cclass <hpdf-cmykcolor> "ScmHpdfCMYKColor*" "Scm_HpdfCMYKColorClass"
  ()
  ((c :type <real> :c-name "h.c")
   (m :type <real> :c-name "h.m")
   (y :type <real> :c-name "h.y")
   (k :type <real> :c-name "h.k"))
  [allocator
   (let* ([ctx::ScmHpdfCMYKColor* (SCM_ALLOCATE ScmHpdfCMYKColor klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])


(define-cclass <hpdf-linecap> "ScmHpdfLineCap*" "Scm_HpdfLineCapClass"
()
())
(define-cclass <hpdf-linejoin> "ScmHpdfLineJoin*" "Scm_HpdfLineJoinClass"
()
())
(define-cclass <hpdf-dashmode> "ScmHpdfDashMode*" "Scm_HpdfDashModeClass"
()
())

(define-cclass <hpdf-date> "ScmHpdfDate*" "Scm_HpdfDateClass"
  ()
  ((year :type <int> :c-name "h.year")
   (month :type <int> :c-name "h.year")
   (day :type <int> :c-name "h.year")
   (hour :type <int> :c-name "h.year")
   (minutes :type <int> :c-name "h.year")
   (seconds :type <int> :c-name "h.year")
   ;;(ind :type <> :c-name "h.year")
   (off-hour :type <int> :c-name "h.off_hour")
   (off-minutes :type <int> :c-name "h.off_minutes")))

(define-cclass <hpdf-dict> "ScmHpdfDict*" "Scm_HpdfDictClass"
()
())
(define-cclass <hpdf-textwidth> "ScmHpdfTextWidth*" "Scm_HpdfTextWidthClass"
()
())

(define-cclass <hpdf-embedded-file> "ScmHpdfEmbeddedFile*" "Scm_HpdfEmbeddedFileClass"
  ()
  ())

(define-cclass <hpdf-u3d>
  :base "ScmHpdfU3D*" "Scm_HpdfU3DClass"
  ()
  ()
  [allocator
   (let* ([ctx::ScmHpdfU3D* (SCM_ALLOCATE ScmHpdfU3D klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])


(define-cclass <hpdf-3d-measure>
  :base "ScmHpdf3DMeasure*" "Scm_Hpdf3DMeasureClass"
  ()
  ()
  [allocator
   (let* ([ctx::ScmHpdf3DMeasure* (SCM_ALLOCATE ScmHpdf3DMeasure klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])

(define-cclass <hpdf-exdata>
  :base "ScmHpdfExData*" "Scm_HpdfExDataClass"
  ()
  ()
  [allocator
   (let* ([ctx::ScmHpdfExData* (SCM_ALLOCATE ScmHpdfExData klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])


(define-cproc hpdf-info-set-info-date-attr (dict::<hpdf-dict>
                                            type::<fixnum>
                                            year::<int>
                                            month::<int>
                                            day::<int>
                                            hour::<int>
                                            minutes::<int>
                                            seconds::<int>
                                            ind::<char>
                                            off_hour::<int>
                                            off_minutes::<int>)
  (body <ulong>
        ""))

;; type utility 
(define-cproc make-rect (left::<float>
                         bottom::<float>
                         right::<float>
                         top::<float>)
  (body <hpdf-rect>
        "GAUCHE_HPDF_FUNC(\"make-rect\");"
        "ScmHpdfRect *h = SCM_NEW(ScmHpdfRect);"
        "SCM_SET_CLASS(h, SCM_CLASS_HPDF_RECT);"
        "h->h.left = left;"
        "h->h.bottom = bottom;"
        "h->h.right = right;"
        "h->h.top = top;"
        "SCM_RESULT = h;"))

(define-cproc make-date
  (year::<int>
   month::<int>
   day::<int>
   hour::<int>
   minutes::<int>
   seconds::<int>
   ind::<char>
   off_hour::<int>
   off_minutes::<int>) ::<hpdf-date>
   (let* ([date::ScmHpdfDate* (SCM_NEW ScmHpdfDate)])
	  
     (.if DEBUG (GAUCHE_HPDF_FUNC "make-rect"))
     (SCM_SET_CLASS date SCM_CLASS_HPDF_DATE)
     "date->year = year;"
     "date->day = day;"
     "date->hour = hour;"
     "date->minutes = minutes;"
     "date->seconds = seconds;"
     "date->ind = seconds;"
     "date->off_hour = off_hour;"
     "date->off_minutes = off_minutes;"
     (result date)))


    
;;
;; The following entry is a procedure
;;

"
extern void hpdf_error_handler(HPDF_STATUS   error_no,
                        HPDF_STATUS   detail_no,
                        void         *user_data);
"


;;(define-cproc hpdf-page-measuretext (page::<hpdf-page> s::<const-cstring> width::<float> wordwrapage::<int> rwidth::<float>?)
;;  (body <uint> "  SCM_RESULT = HPDF_Page_MeasureText(page->h, s, width, wordwrap, rwidth);"))

(define-cproc hpdf-page-set-slide-show (page::<hpdf-page> type::<uint> disp::<float> trans::<float>)
  (body <ulong>
        "switch(type) {"
        "case HPDF_TS_WIPE_RIGHT:"
        "case HPDF_TS_WIPE_UP:"
        "case HPDF_TS_WIPE_LEFT:"
        "case HPDF_TS_WIPE_DOWN:"
        "case HPDF_TS_BARN_DOORS_HORIZONTAL_OUT:"
        "case HPDF_TS_BARN_DOORS_HORIZONTAL_IN:"
        "case HPDF_TS_BARN_DOORS_VERTICAL_OUT:"
        "case HPDF_TS_BARN_DOORS_VERTICAL_IN:"
        "case HPDF_TS_BOX_OUT:"
        "case HPDF_TS_BOX_IN:"
        "case HPDF_TS_BLINDS_HORIZONTAL:"
        "case HPDF_TS_BLINDS_VERTICAL:"
        "case HPDF_TS_DISSOLVE:"
        "case HPDF_TS_GLITTER_RIGHT:"
        "case HPDF_TS_GLITTER_DOWN:"
        "case HPDF_TS_GLITTER_TOP_LEFT_TO_BOTTOM_RIGHT:"
        "case HPDF_TS_REPLACE:"
        "  SCM_RESULT = HPDF_Page_SetSlideShow(page->h, type, disp, trans);"
        "  break;"
        "default:"
        "  Scm_Error(\"\");"
        "  break;"
        "}"))

;;
;; Graphics
;;
(define-cproc hpdf-page-set-line-width (page::<hpdf-page> line_width::<float>)
  (body <ulong> "HPDF_Page_SetLineWidth(page->h, line_width);"))

(define-cproc hpdf-page-set-line-cap (page::<hpdf-page> cap::<hpdf-linecap>)
  (body <ulong> "HPDF_Page_SetLineCap(page->h, cap->h);"))

(define-cproc hpdf-page-set-line-join (page::<hpdf-page> join::<uint>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-get-stream-size\");"
        "switch (join) {"
        "case HPDF_MITER_JOIN:"
        "case HPDF_ROUND_JOIN:"
        "case HPDF_BEVEL_JOIN:"
        "  SCM_RESULT = HPDF_Page_SetLineJoin(page->h, join);"
        "  break;"
        "default:"
        "  /* error */"
        "  SCM_RESULT = 0;"
        "  Scm_Error(\"Invalid 2nd argument. it needs HPDF_MITER_JOIN or HPDF_ROUND_JOIN or HPDF_BEVEL_JOIN.\\n\");"
        "  break;"
        "}"))

(define-cproc hpdf-page-set-miter-limit (page::<hpdf-page> miter_limit::<float>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-page-set-miter-limit\");"
        "SCM_RESULT = HPDF_Page_SetMiterLimit(page->h, miter_limit);"))

;; FIXME
(define-cproc hpdf-page-set-dash
  (page::<hpdf-page> dash num_param::<uint> phase::<uint>) ::<ulong>
  (let* ([vec::ScmU16Vector* 0])
    (.if DEBUG
	 (GAUCHE_HPDF_FUNC "hpdf-page-set-dash"))
    (cond ((SCM_VECTORP dash)
	   )
	  ((SCM_LISTP dash)
	   )
	  (else
	   (Scm_Error "")))
    ;; (result (HPDF_Page_SetDash (-> page h)
    ;; 			       (SCM_FOREIGN_POINTER dash))
    ;; 						    num_param phase)))
    (result 0)))

(define-cproc hpdf-page-set-flat (page::<hpdf-page> flatness::<float>)
  (expr <ulong> "HPDF_Page_SetFlat(page->h, flatness)"))

(define-cproc hpdf-page-setextgstate (page::<hpdf-page> ext_gstate::<hpdf-extgstate>)
  (expr <ulong> "HPDF_Page_SetExtGState(page->h, ext_gstate->h)"))

;; Special graphic state operator
(define-cproc hpdf-page-gsave (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_GSave(page->h);"))

(define-cproc hpdf-page-grestore (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_GRestore(page->h);"))

(define-cproc hpdf-page-concat (page::<hpdf-page>
                                a::<float>
                                b::<float>
                                c::<float>
                                d::<float>
                                x::<float>
                                y::<float>)
  (body <ulong> "HPDF_Page_Concat(page->h, a, b, c, d, x, y);"))

;; Path construction operator
(define-cproc hpdf-page-moveto (page::<hpdf-page> x::<float> y::<float>)
  (body <ulong> "HPDF_Page_MoveTo(page->h, x, y);"))

(define-cproc hpdf-page-lineto (page::<hpdf-page> x::<float> y::<float>)
  (body <ulong> "HPDF_Page_LineTo(page->h, x, y);"))

(define-cproc hpdf-page-curveto (page::<hpdf-page> x1::<float> y1::<float> x2::<float> y2::<float> x3::<float> y3::<float>)
  (body <ulong> "HPDF_Page_CurveTo(page->h, x1, y1, x2, y2, x3, y3);"))

(define-cproc hpdf-page-curveto2 (page::<hpdf-page> x2::<float> y2::<float> x3::<float> y3::<float>)
  (body <ulong> "HPDF_Page_CurveTo2(page->h, x2, y2, x3, y3);"))

(define-cproc hpdf-page-curveto3 (page::<hpdf-page> x1::<float> y1::<float> x3::<float> y3::<float>)
  (body <ulong> "HPDF_Page_CurveTo2(page->h, x1, y1, x3, y3);"))

(define-cproc hpdf-page-close-path (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_ClosePath(page->h);"))

(define-cproc hpdf-page-rectangle (page::<hpdf-page> x::<float> y::<float> width::<float> height::<float>)
  (body <ulong> "HPDF_Page_Rectangle(page->h, x, y, width, height);"))

;; Path painting operator
(define-cproc hpdf-page-stroke (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_Stroke(page->h);"))

(define-cproc hpdf-page-close-path-stroke (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_ClosePathStroke(page->h);"))

(define-cproc hpdf-page-fill (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_Fill(page->h);"))

(define-cproc hpdf-page-eo-fill (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_Eofill(page->h);"))

(define-cproc hpdf-page-fill-stroke (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_FillStroke(page->h);"))

(define-cproc hpdf-page-eofill-stroke (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_EofillStroke(page->h);"))

(define-cproc hpdf-page-close-path-fill-stroke (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_ClosePathFillStroke(page->h);"))

(define-cproc hpdf-page-close-path-eofill-stroke (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_ClosePathEofillStroke(page->h);"))

(define-cproc hpdf-page-end-path (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_EndPath(page->h);"))

;; Clipping paths operator
(define-cproc hpdf-page-clip (page::<hpdf-page>)
  (body <ulong> "SCM_RESULT = HPDF_Page_Clip(page->h);"))

(define-cproc hpdf-page-eoclip (page::<hpdf-page>)
  (expr <ulong> "HPDF_Page_Eoclip(page->h)"))

;; Text object operator
;; BT
(define-cproc hpdf-page-begin-text (page::<hpdf-page>)
  (expr <ulong> "HPDF_Page_BeginText(page->h)"))

;; ET
(define-cproc hpdf-page-end-text (page::<hpdf-page>)
  (expr <ulong> "HPDF_Page_EndText(page->h)"))

;; Text state
(define-cproc hpdf-page-set-char-space (page::<hpdf-page> value::<float>)
  (expr <ulong> "HPDF_Page_SetCharSpace(page->h, value)"))

(define-cproc hpdf-page-setwordspace (page::<hpdf-page> value::<float>)
  (expr <ulong> "HPDF_Page_SetWordSpace(page->h, value)"))

(define-cproc hpdf-page-set-horizontal-scalling (page::<hpdf-page> value::<float>)
  (expr <ulong> "HPDF_Page_SetWordSpace(page->h, value)"))

(define-cproc hpdf-page-set-text-leading (page::<hpdf-page> value::<float>)
  (expr <ulong> "HPDF_Page_SetTextLeading(page->h, value)"))

;; (define-cproc hpdf-page-set-font-and-size (page::<hpdf-page> font::<hpdf-font> size::<float>)
;;   (body <ulong>
;;         "GAUCHE_HPDF_FUNC(\"hpdf-page-set-font-and-size\");"
;;         "SCM_RESULT = HPDF_Page_SetFontAndSize(page->h, font->h, size);"))

(define-cproc hpdf-page-set-text-rendering-mode (page::<hpdf-page> mode::<uint>)
  (expr <ulong> "HPDF_Page_SetTextRenderingMode(page->h, mode)"))

(define-cproc hpdf-page-set-text-rise (page::<hpdf-page> value::<float>)
  (expr <ulong> "HPDF_Page_SetTextRise(page->h, value)"))

;; Text positioning 
(define-cproc hpdf-page-move-text-pos (page::<hpdf-page> x::<float> y::<float>)
  (expr <ulong> "HPDF_Page_MoveTextPos(page->h, x, y)"))

(define-cproc hpdf-page-move-text-pos2 (page::<hpdf-page> x::<float> y::<float>)
  (expr <ulong> "HPDF_Page_MoveTextPos2(page->h, x, y)"))

(define-cproc hpdf-page-set-text-matrix (page::<hpdf-page> a::<float> b::<float> c::<float> d::<float> x::<float> y::<float>)
  (expr <ulong> "HPDF_Page_SetTextMatrix(page->h, a, b, c, d, x, y)"))

(define-cproc hpdf-page-move-to-nextline (page::<hpdf-page>)
  (expr <ulong> "HPDF_Page_MoveToNextLine(page->h)"))
  
;; Text showing
(define-cproc hpdf-page-show-text (page::<hpdf-page> text::<const-cstring>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-page-show-text\");"
        "#ifdef GAUCHE_HPDF_DEBUG"
        "char dummy[20];"
        "int i = 0;"
        "dummy[i] = 0x83;i++;"
        "dummy[i] = 0x41;i++;"
        "dummy[i] = 0x83;i++;"
        "dummy[i] = 0x81;i++;"
        "dummy[i] = 0x83;i++;"
        "dummy[i] = 0x93;i++;"
        "dummy[i] = 0x83;i++;"
        "dummy[i] = 0x7b;i++;"
        "dummy[i] = 0x90;i++;"
        "dummy[i] = 0xd4;i++;"
        "dummy[i] = 0;i++;"
        "dummy[i] = 0;i++;"
        "dummy[i] = 0;i++;"
        "i = 0;"
        "char *p = text;"
        "fprintf(stderr, \"text entry:\", text);"
        "while (i < 20) {"
        "  fprintf(stderr, \"hex: 0x%02x int:%6d\\n\", text[i], text[i]);"
        "  i++;"
        "}"
        "i = 0;"
        "fprintf(stderr, \"dummy entry:\", dummy);"
        "while (i < 20) {"
        "  fprintf(stderr, \"hex: 0x%02x int:%6d\\n\", dummy[i], dummy[i]);"
        "  i++;"
        "}"
        "#endif"
        "if (strlen(text) > 0) {"
        "  SCM_RESULT = HPDF_Page_ShowText(page->h, text);"
        "} else {"
        "  SCM_RESULT = 0;"
        "}"
        ))

(define-cproc hpdf-page-show-text-next-line (page::<hpdf-page> text::<const-cstring>)
  (expr <ulong> "HPDF_Page_ShowTextNextLine(page->h, text)"))

(define-cproc hpdf-page-show-text-next-line-ex (page::<hpdf-page> word_space::<float> char_space::<float> text::<const-cstring>)
  (expr <ulong> "HPDF_Page_ShowTextNextLineEx(page->h, word_space, char_space, text)"))

;; Color showing
(define-cproc hpdf-page-set-gray-fill (page::<hpdf-page> gray::<float>)
  (expr <ulong> "HPDF_Page_SetGrayFill(page->h, gray)"))

(define-cproc hpdf-page-set-gray-stroke (page::<hpdf-page> gray::<float>)
  (expr <ulong> "HPDF_Page_SetGrayStroke(page->h, gray)"))

(define-cproc hpdf-page-set-rgb-fill (page::<hpdf-page> r::<float> g::<float> b::<float>)
  (expr <ulong> "HPDF_Page_SetRGBFill(page->h, r, g, b)"))

(define-cproc hpdf-page-set-rgb-stroke (page::<hpdf-page> r::<float> g::<float> b::<float>)
  (expr <ulong> "HPDF_Page_SetRGBStroke(page->h, r, g, b)"))

(define-cproc hpdf-page-set-cmyk-fill (page::<hpdf-page> c::<float> m::<float> y::<float> k::<float>)
  (expr <ulong> "HPDF_Page_SetCMYKFill(page->h, c, m, y, k)"))

(define-cproc hpdf-page-set-cmyk-stroke (page::<hpdf-page> c::<float> m::<float> y::<float> k::<float>)
  (expr <ulong> "HPDF_Page_SetCMYKStroke(page->h, c, m, y, k)"))

;; XObjects
(define-cproc hpdf-page-execute-xobject
  (page::<hpdf-page> obj) ::<ulong>
  (result "HPDF_Page_ExecuteXObject(page->h, HPDF_XOBJECT_BOX(obj)->h)"))

;;
;; Font Handling
;;

;; (define-cproc hpdf-load-type1-font-from-file (doc::<hpdf-doc> afm_file_name::<const-cstring> data_file_name::<const-cstring>)
;;   (body <const-cstring>?
;;         "GAUCHE_HPDF_FUNC(\"hpdf-load-type1-font-from-file\");"
;;         "/* afm, pfb*/"
;;         "SCM_RESULT = HPDF_LoadType1FontFromFile(doc->h, afm_file_name, data_file_name);"))

;; (define-cproc hpdf-load-ttf-font-from-file (doc::<hpdf-doc> file::<const-cstring> embedding::<boolean>)
;;   (body <const-cstring>?
;;         "GAUCHE_HPDF_FUNC(\"hpdf-load-ttf-font-from-file\");"
;;         "const char *p = HPDF_LoadTTFontFromFile(doc->h, file, embedding);"
;;         "/* GAUCHE_HPDF_HEX('funcp', p);*/"
;;         "SCM_RESULT = p;"
;;         "if (p) {"
;;         "} else {"
;;         "  if (embedding) {"
;;         "     Scm_Error(\"can't load True Type Font(embedding %s) into PDF.\", file);"
;;         "  } else {"
;;         "     Scm_Error(\"can't load True Type Font(%s) into PDF.\", file);"
;;         "  }"
;;         "}"))

;; (define-cproc hpdf-load-ttf-font-from-file2 (doc::<hpdf-doc> file::<const-cstring> index::<uint> embedding::<boolean>)
;;   (body <const-cstring>?
;;         "GAUCHE_HPDF_FUNC(\"hpdf-load-ttf-font-from-file2\");"
;;         "SCM_RESULT = HPDF_LoadTTFontFromFile2(doc->h, file, index, embedding);"))

(define-cproc hpdf-add-page-label (doc::<hpdf-doc> page-num::<uint> page-style::<uint> first-page::<uint> prefix::<const-cstring>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-add-page-label\");"
        ""))

(define-cproc hpdf-use-jp-fonts (doc::<hpdf-doc>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-use-jp-fonts\");"
        "SCM_RESULT = HPDF_UseJPFonts(doc->h);"))

(define-cproc hpdf-use-kr-fonts (doc::<hpdf-doc>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-use-kr-fonts\");"
        "SCM_RESULT = HPDF_UseKRFonts(doc->h);"))

(define-cproc hpdf-use-cns-fonts (doc::<hpdf-doc>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-use-cns-fonts\");"
        "SCM_RESULT = HPDF_UseCNSFonts(doc->h);"))

(define-cproc hpdf-use-cnt-fonts (doc::<hpdf-doc>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-use-cnt-fonts\");"
        "SCM_RESULT = HPDF_UseCNTFonts(doc->h);"))




;; Info Dictionary
(define-cproc hpdf-set-info-attr (doc::<hpdf-doc> type::<fixnum> value::<const-cstring>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-set-info-attr\");"
        "switch (type) {"
        "case HPDF_INFO_AUTHOR:"
        "case HPDF_INFO_CREATOR:"
        "case HPDF_INFO_TITLE:"
        "case HPDF_INFO_SUBJECT:"
        "case HPDF_INFO_KEYWORDS:"
        "  break;"
        "default:"
        "  break;"
        "}"
        "SCM_RESULT = HPDF_SetInfoAttr(doc->h, type, value);"))

(define-cproc hpdf-get-info-attr (doc::<hpdf-doc> type::<fixnum>)
  (body <const-cstring>
        "GAUCHE_HPDF_FUNC(\"hpdf-get-info-attr\");"
        "switch (type) {"
        "case HPDF_INFO_CREATION_DATE:"
        "case HPDF_INFO_MOD_DATE:"
        "case HPDF_INFO_AUTHOR:"
        "case HPDF_INFO_CREATOR:"
        "case HPDF_INFO_TITLE:"
        "case HPDF_INFO_SUBJECT:"
        "case HPDF_INFO_KEYWORDS:"
        "  break;"
        "default:"
        "  Scm_Error(\"Invalid 2nd argument.\");"
        "  break;"
        "}"
        "SCM_RESULT = HPDF_GetInfoAttr(doc->h, type);"))

(define-cproc hpdf-set-info-date-attr (doc::<hpdf-doc> type::<fixnum> date::<hpdf-date>)
  (expr <ulong> "SCM_RESULT = HPDF_SetInfoDateAttr(doc->h, type, date->h)"))

;; encryption
(define-cproc hpdf-set-password (doc::<hpdf-doc> owner_passwd::<const-cstring> user_passwd::<const-cstring>)
  (expr <ulong> "SCM_RESULT = HPDF_SetPassword(doc->h, owner_passwd, user_passwd)"))

(define-cproc hpdf-set-permission (doc::<hpdf-doc> permission::<uint>)
  (body <ulong>
        "switch(permission) {"
        "case HPDF_ENABLE_READ:"
        "case HPDF_ENABLE_PRINT:"
        "case HPDF_ENABLE_EDIT_ALL:"
        "case HPDF_ENABLE_COPY:"
        "case HPDF_ENABLE_EDIT:"
        "  break;"
        "default:"
        "  break;"
        "}"
        "SCM_RESULT = HPDF_SetPermission(doc->h, permission);"))

(define-cproc hpdf-set-encryption-mode (doc::<hpdf-doc> mode::<fixnum> key_len::<uint>)
  (expr <ulong> "SCM_RESULT = HPDF_SetEncryptionMode(doc->h, mode, key_len)"))

;; compression
(define-cproc hpdf-set-compression-mode (doc::<hpdf-doc> mode::<uint>)
  (body <ulong>
        "switch (mode) {"
        "case HPDF_COMP_NONE:"
        "case HPDF_COMP_TEXT:"
        "case HPDF_COMP_IMAGE:"
        "case HPDF_COMP_METADATA:"
        "case HPDF_COMP_ALL:"
        "  SCM_RESULT = HPDF_SetCompressionMode(doc->h, mode);"
        "  break;"
        "default:"
        "  Scm_Error(\"\");"
        "  break;"
        "}"))

;; extended graphics state
(define-cproc hpdf-create-ext-gstate (doc::<hpdf-doc>)
  (body <hpdf-extgstate>
        "  ScmHpdfExtGState *h = SCM_NEW(ScmHpdfExtGState);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_EXTGSTATE);
  h->h = HPDF_CreateExtGState(doc->h);
  SCM_RESULT = h;"))

(define-cproc hpdf-ext-gstate-set-alpha-stroke (ext_gstate::<hpdf-extgstate> value::<float>)
  (expr <ulong> "HPDF_ExtGState_SetAlphaStroke(ext_gstate->h, value)"))

(define-cproc hpdf-ext-gstate-set-alpha-fill (ext_gstate::<hpdf-extgstate> value::<float>)
  (expr <ulong> "HPDF_ExtGState_SetAlphaFill(ext_gstate->h, value)"))

(define-cproc hpdf-ext-gstate-set-blend-mode (ext_gstate::<hpdf-extgstate> mode::<fixnum>)
  (expr <ulong> "HPDF_ExtGState_SetBlendMode(ext_gstate->h, mode)"))

;;
(define-cproc hpdf-page-text-width (page::<hpdf-page> text::<const-cstring>)
  (expr <float> "HPDF_Page_TextWidth(page->h, text)"))


(define-cproc hpdf-page-get-width (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetWidth(page->h)"))

(define-cproc hpdf-page-get-height (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetHeight(page->h)"))

(define-cproc hpdf-page-get-gmode (page::<hpdf-page>)
  (expr <uint16> "HPDF_Page_GetGMode(page->h)"))

(define-cproc hpdf-page-get-current-pos (page::<hpdf-page>)
  (body <hpdf-point>
        "  ScmHpdfPoint *h = SCM_NEW(ScmHpdfPoint);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_POINT);
  h->h = HPDF_Page_GetCurrentPos(page->h);
  SCM_RESULT = h;"))

;; FIXME
;; (define-cproc hpdf-page-get-current-pos2 (page::<hpdf-page> pos::<hpdf-point>)
;;   (body <ulong> "  SCM_RESULT = HPDF_Page_GetCurrentPos2(page->h, pos->h);"))

(define-cproc hpdf-page-get-current-text-pos (page::<hpdf-page>)
  (body <hpdf-point>
        "  ScmHpdfPoint *h = SCM_NEW(ScmHpdfPoint);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_POINT);
  h->h = HPDF_Page_GetCurrentTextPos(page->h);
  SCM_RESULT = h;"))

;; FIXME
;; (define-cproc hpdf-page-get-current-text-pos2 (page::<hpdf-page> pos::<hpdf-point>)
;;  (body <ulong> "  SCM_RESULT = HPDF_Page_GetCurrentTextPos2(page->h, pos->h);"))

(define-cproc hpdf-page-get-current-font
  (page::<hpdf-page>) ::<hpdf-font>
  (let* ([font::ScmHpdfFont* (SCM_NEW ScmHpdfFont)]
	 [null (SCM_SET_CLASS (-> font h) SCM_CLASS_HPDF_FONT)]
	 )
    (set! (-> font h) (HPDF_Page_GetCurrentFont (-> page h)))
    (result font)))


(define-cproc hpdf-page-get-current-font-size (page::<hpdf-page>)
  (expr <float>  "HPDF_Page_GetCurrentFontSize(page->h)"))

(define-cproc hpdf-page-get-transmatrix (page::<hpdf-page>)
  (body <hpdf-transmatrix>
        "  ScmHpdfTransMatrix *h = SCM_NEW(ScmHpdfTransMatrix);"
        "SCM_SET_CLASS(h, SCM_CLASS_HPDF_TRANSMATRIX);"
        "h->h = HPDF_Page_GetTransMatrix(page->h);"
        "SCM_RESULT = h;"))

(define-cproc hpdf-page-get-line-width (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetLineWidth(page->h)"))

(define-cproc hpdf-page-get-line-cap (page::<hpdf-page>)
  (body <hpdf-linecap>
        "  ScmHpdfLineCap *h = SCM_NEW(ScmHpdfLineCap);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_LINECAP);
  h->h = HPDF_Page_GetLineCap(page->h);
  SCM_RESULT = h;"))

(define-cproc hpdf-page-get-line-join (page::<hpdf-page>)
  (body <hpdf-linejoin>
        "  ScmHpdfLineJoin *h = SCM_NEW(ScmHpdfLineJoin);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_LINEJOIN);
  h->h = HPDF_Page_GetLineJoin(page->h);
  SCM_RESULT = h;"))

(define-cproc hpdf-page-get-miter-limit (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetMiterLimit(page->h)"))

(define-cproc hpdf-page-get-dash (page::<hpdf-page>)
  (body <hpdf-dashmode>
        "  ScmHpdfDashMode *h = SCM_NEW(ScmHpdfDashMode);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_DASHMODE);
  h->h = HPDF_Page_GetDash(page->h);
  SCM_RESULT = h;"))

(define-cproc hpdf-page-get-flat (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetFlat(page->h)"))

(define-cproc hpdf-page-get-char-space (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetCharSpace(page->h)"))

(define-cproc hpdf-page-get-word-space (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetWordSpace(page->h)"))

(define-cproc hpdf-page-get-horizontal-scalling (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetHorizontalScalling(page->h)"))

(define-cproc hpdf-page-get-text-leading (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetTextLeading(page->h)"))

(define-cproc hpdf-page-get-text-rendering-mode (page::<hpdf-page>)
  (expr <fixnum> "HPDF_Page_GetTextRenderingMode(page->h)"))

;; obsolete
(define-cproc hpdf-page-get-text-raise (page::<hpdf-page>)
  (body <float>
        "Scm_Printf(SCM_CURERR, \"Warning: hpdf-page-get-text-raise is obsolete. use hpdf-page-get-text-rise instead.\");"
        "  SCM_RESULT = HPDF_Page_GetTextRaise(page->h);"))

(define-cproc hpdf-page-get-text-rise (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetTextRise(page->h)"))

(define-cproc hpdf-page-get-rgb-fill (page::<hpdf-page>)
  (body <hpdf-rgbcolor>
        "  ScmHpdfRGBColor *h = SCM_NEW(ScmHpdfRGBColor);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_RGBCOLOR);
  h->h = HPDF_Page_GetRGBFill(page->h);
  SCM_RESULT = h;"))

(define-cproc hpdf-page-get-rgb-stroke (page::<hpdf-page>)
  (body <hpdf-rgbcolor>
        "  ScmHpdfRGBColor *h = SCM_NEW(ScmHpdfRGBColor);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_RGBCOLOR);
  h->h = HPDF_Page_GetRGBStroke(page->h);
  SCM_RESULT = h;"))

(define-cproc hpdf-page-get-cmyk-fill (page::<hpdf-page>)
  (body <hpdf-cmykcolor>
        "  ScmHpdfCMYKColor *h = SCM_NEW(ScmHpdfCMYKColor);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_CMYKCOLOR);
  h->h = HPDF_Page_GetCMYKFill(page->h);
  SCM_RESULT = h;"))

(define-cproc hpdf-page-get-cmyk-stroke (page::<hpdf-page>)
  (body <hpdf-cmykcolor>
        "  ScmHpdfCMYKColor *h = SCM_NEW(ScmHpdfCMYKColor);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_CMYKCOLOR);
  h->h = HPDF_Page_GetCMYKStroke(page->h);
  SCM_RESULT = h;"))


(define-cproc hpdf-attach-file
  (doc::<hpdf-doc> file::<const-cstring>) ::<hpdf-embedded-file>
  (result (HPDF_AttachFile (-> doc h) file)))

;; FIXME
;; (define-cproc hpdf-page-get-current-text-pos2 (page::<hpdf-page> pos::<hpdf-point>)
;;   (body <ulong> "SCM_RESULT = HPDF_Page_GetCurrentTextPos2(page->h, pos->h);"))


;; Local variables:
;; mode: scheme
;; end:
