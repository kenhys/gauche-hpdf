;;;
;;; hpdflib.stub
;;;

"
/*
 * hpdf.h $Id$

 Copyright (c) 2007, HAYASHI Kentaro <kenhys@gigo-ice.org> All rights reserved.

 Redistribution and use in source and binary forms, with or without modification,
 are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation and/or
    other materials provided with the distribution.
    * Neither the name of the GIGO-ICE.ORG nor the names of its contributors
    may be used to endorse or promote products derived from this software
    without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
"

"
#include \"gauche-hpdf.h\"
#include <hpdf.h>
"
(include "gauche-hpdf.types")

(define-cproc hpdf-info-set-info-date-attr (dict::<hpdf-dict> type::<fixnum>
                                                              year::<int>
                                                              month::<int>
                                                              day::<int>
                                                              hour::<int>
                                                              minutes::<int>
                                                              seconds::<int>
                                                              ind::<char>
                                                              off_hour::<int>
                                                              off_minutes::<int>)
  (body <ulong>
        ""))

;;
;; The following entry is a procedure
;;

"
extern void hpdf_error_handler(HPDF_STATUS   error_no,
                        HPDF_STATUS   detail_no,
                        void         *user_data);
"

(define-cproc hpdf-get-version () 
  (body <const-cstring> "SCM_RESULT = HPDF_GetVersion();"))

(define-cproc hpdf-new (&optional callback)
  (body <hpdf-doc>
        "GAUCHE_HPDF_FUNC(\"hpdf-new\");"
        "ScmHpdfDoc *h = SCM_NEW(ScmHpdfDoc);"
        "SCM_SET_CLASS(h, SCM_CLASS_HPDF_DOC);"
        "if (SCM_CLOSUREP(callback)) {"
        "  h->h = HPDF_New(hpdf_error_handler, (void *)SCM_FOREIGN_POINTER(callback)->ptr);"
        "} else {"
        "  /* Scm_Printf(SCM_CURERR, \"no HPDF error handler.\\n\");*/"
        "  h->h = HPDF_New(hpdf_error_handler, NULL);"
        "}"
        "SCM_RESULT = h;"))

(define-cproc hpdf-free (doc::<hpdf-doc>)
  (body <void>
        "GAUCHE_HPDF_FUNC(\"hpdf-free\");"
        "HPDF_Free(doc->h);"
        "doc->h = NULL;"))

(define-cproc hpdf-new-doc (doc::<hpdf-doc>)
  (body <void>
        "GAUCHE_HPDF_FUNC(\"hpdf-new-doc\");"
        ""))

(define-cproc hpdf-has-doc (doc::<hpdf-doc>)
  (body <int>
        "GAUCHE_HPDF_FUNC(\"hpdf-has-doc\");"
        "SCM_RESULT = HPDF_HasDoc(doc->h);"))

(define-cproc hpdf-free-doc (doc::<hpdf-doc>)
  (body <void>
        "GAUCHE_HPDF_FUNC(\"hpdf-new-doc\");"
        ""))

(define-cproc hpdf-free-doc-all (doc::<hpdf-doc>)
  (body <void>
        "GAUCHE_HPDF_FUNC(\"hpdf-free-doc-all\");"
        ""))

(define-cproc hpdf-add-page (doc::<hpdf-doc>)
  (body <hpdf-page>
        "GAUCHE_HPDF_FUNC(\"hpdf-add-page\");"
        "ScmHpdfPage *h = SCM_NEW(ScmHpdfPage);"
        "SCM_SET_CLASS(h, SCM_CLASS_HPDF_PAGE);"
        "h->h = HPDF_AddPage(doc->h);"
        "SCM_RESULT = h;"))

(define-cproc hpdf-get-stream-size (doc::<hpdf-doc>)
  (body <uint32>
        "GAUCHE_HPDF_FUNC(\"hpdf-get-stream-size\");"
        "SCM_RESULT = HPDF_GetStreamSize(doc->h);"))

;; FIXME use port?
;;(define-cproc hpdf-readfromstream (doc::<hpdf-doc> buf size)
;;  (body <ulong> "SCM_RESULT = HPDF_ReadFromStream(doc->h, buf, size);"))

(define-cproc hpdf-reset-stream (doc::<hpdf-doc>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-reset-stream\");"
        "SCM_RESULT = HPDF_ResetStream(doc->h);"))

(define-cproc hpdf-save-to-file (doc::<hpdf-doc> n::<const-cstring>)
  (body <int>
        "GAUCHE_HPDF_FUNC(\"hpdf-save-to-file\");"
        "SCM_RESULT = HPDF_SaveToFile(doc->h, n);"))

(define-cproc hpdf-get-error (doc::<hpdf-doc>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-get-error\");"
        "SCM_RESULT = HPDF_GetError(doc->h);"))

(define-cproc hpdf-get-error-detail (doc::<hpdf-doc>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-get-error-detail\");"
        "SCM_RESULT = HPDF_GetErrorDetail(doc->h);"))

(define-cproc hpdf-reset-error (doc::<hpdf-doc>)
  (body <void>
        "GAUCHE_HPDF_FUNC(\"hpdf-reset-error\");"
        "HPDF_ResetError(doc->h);"))

(define-cproc hpdf-set-page-configuration (doc::<hpdf-doc> page_per_pages::<uint>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-set-page-configuration\");"
        "SCM_RESULT = HPDF_SetPagesConfiguration(doc->h, page_per_pages);"))

(define-cproc hpdf-get-page-by-index (doc::<hpdf-doc> index::<uint>)
  (body <hpdf-page>
        "GAUCHE_HPDF_FUNC(\"hpdf-get-page-by-index\");"
        "  ScmHpdfPage *h = SCM_NEW(ScmHpdfPage);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_PAGE);
  h->h = HPDF_GetPageByIndex(doc->h, index);
  SCM_RESULT = h;"))

;;
;; Layout Handling
;;
(define-cproc hpdf-get-page-layout (doc::<hpdf-doc>)
  (body <fixnum>
        "GAUCHE_HPDF_FUNC(\"hpdf-get-page-layout\");"
        "/* enum HPDF_PageLayout */"
        "SCM_RESULT = HPDF_GetPageLayout(doc->h);"))

(define-cproc hpdf-set-page-layout (doc::<hpdf-doc> layout::<fixnum>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-set-page-layout\");"
        "/* enum HPDF_PageLayout */"
        "switch (layout) {"
        "case HPDF_PAGE_LAYOUT_SINGLE:"
        "case HPDF_PAGE_LAYOUT_ONE_COLUMN:"
        "case HPDF_PAGE_LAYOUT_TWO_COLUMN_LEFT:"
        "case HPDF_PAGE_LAYOUT_TWO_COLUMN_RIGHT:"
        "  SCM_RESULT = HPDF_SetPageLayout(doc->h, layout);"
        "  break;"
        "default:"
        "  /* error */"
        "  Scm_Error(\"\");"
        "  break;"
        "}"
        ))

(define-cproc hpdf-get-page-mode (doc::<hpdf-doc>)
  (body <fixnum>
        "GAUCHE_HPDF_FUNC(\"hpdf-get-page-mode\");"
        "/* enum HPDF_PageMode */"
        "SCM_RESULT = HPDF_GetPageMode(doc->h);"))

(define-cproc hpdf-set-page-mode (doc::<hpdf-doc> mode::<fixnum>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-set-page-mode\");"
        "switch(mode) {"
        "case HPDF_PAGE_MODE_USE_NONE:"
        "case HPDF_PAGE_MODE_USE_OUTLINE:"
        "case HPDF_PAGE_MODE_USE_THUMBS:"
        "case HPDF_PAGE_MODE_FULL_SCREEN:"
        "  SCM_RESULT = HPDF_SetPageMode(doc->h, mode);"
        "  break;"
        "default:"
        "  Scm_Error(\"\");"
        "  break;"
        "}"))

(define-cproc hpdf-get-viewer-preference (doc::<hpdf-doc>)
  (body <uint>
        "GAUCHE_HPDF_FUNC(\"hpdf-get-viewer-preference\");"
        "SCM_RESULT = HPDF_GetViewerPreference(doc->h);"))

(define-cproc hpdf-set-viewer-preference (doc::<hpdf-doc> value::<uint>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-set-viewer-preference\");"
        "SCM_RESULT = HPDF_SetViewerPreference(doc->h, value);"))

(define-cproc hpdf-set-open-action (doc::<hpdf-doc> open_action::<hpdf-destination>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-set-open-action\");"
        "SCM_RESULT = HPDF_SetOpenAction(doc->h, open_action->h);"))

;;
;;
;;
(define-cproc hpdf-page-set-width (page::<hpdf-page> v::<float>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-page-set-width\");"
        "SCM_RESULT = HPDF_Page_SetWidth(page->h, v);"))

(define-cproc hpdf-page-set-height (page::<hpdf-page> v::<float>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-page-set-height\");"
        "HPDF_Page_SetHeight(page->h, v);"))

(define-cproc hpdf-page-set-size (page::<hpdf-page> size::<fixnum> direction::<fixnum>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-page-set-size\");"
        "switch (size) {"
        "case HPDF_PAGE_SIZE_LETTER:"
        "case HPDF_PAGE_SIZE_LEGAL:"
        "case HPDF_PAGE_SIZE_A3:"
        "case HPDF_PAGE_SIZE_A4:"
        "case HPDF_PAGE_SIZE_A5:"
        "case HPDF_PAGE_SIZE_B4:"
        "case HPDF_PAGE_SIZE_B5:"
        "case HPDF_PAGE_SIZE_EXECUTIVE:"
        "case HPDF_PAGE_SIZE_US4x6:"
        "case HPDF_PAGE_SIZE_US4x8:"
        "case HPDF_PAGE_SIZE_US5x7:"
        "case HPDF_PAGE_SIZE_COMM10:"
        "  GAUCHE_HPDF_INT(\"size\", size);"
        "  break;"
        "default:"
        "  Scm_Error(\"Invalid 2nd argument. it needs HPDF_PAGE_SIZE_LETTER or HPDF_PAGE_SIZE_LEGAL or HPDF_PAGE_SIZE_A3 or HPDF_PAGE_SIZE_A4 or HPDF_PAGE_SIZE_A5 or HPDF_PAGE_SIZE_B4 or HPDF_PAGE_SIZE_B5 or HPDF_PAGE_SIZE_EXECUTIVE or HPDF_PAGE_SIZE_US4x6 or HPDF_PAGE_SIZE_US4x8 or HPDF_PAGE_SIZE_US5x7 or HPDF_PAGE_SIZE_COMM10.\\n\");"
        "  break;"
        "}"
        "switch (direction) {"
        "case HPDF_PAGE_PORTRAIT:"
        "case HPDF_PAGE_LANDSCAPE:"
        "  break;"
        "default:"
        "  Scm_Error(\"Invalid 3rd argument. it needs HPDF_PAGE_LANDSCAPE or HPDF_PAGE_PORTRAIT.\\n\");"
        "  break;"
        "}"
        "SCM_RESULT = HPDF_Page_SetSize(page->h, size, direction);"))

(define-cproc hpdf-page-set-rotate (page::<hpdf-page> angle::<uint16>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-page-set-rotate\");"
        "HPDF_Page_SetRotate(page->h, angle);"))

;;(define-cproc hpdf-page-measuretext (page::<hpdf-page> s::<const-cstring> width::<float> wordwrapage::<int> rwidth::<float>?)
;;  (body <uint> "  SCM_RESULT = HPDF_Page_MeasureText(page->h, s, width, wordwrap, rwidth);"))

(define-cproc hpdf-page-set-slide-show (page::<hpdf-page> type::<uint> disp::<float> trans::<float>)
  (body <ulong>
        "switch(type) {"
        "case HPDF_TS_WIPE_RIGHT:"
        "case HPDF_TS_WIPE_UP:"
        "case HPDF_TS_WIPE_LEFT:"
        "case HPDF_TS_WIPE_DOWN:"
        "case HPDF_TS_BARN_DOORS_HORIZONTAL_OUT:"
        "case HPDF_TS_BARN_DOORS_HORIZONTAL_IN:"
        "case HPDF_TS_BARN_DOORS_VERTICAL_OUT:"
        "case HPDF_TS_BARN_DOORS_VERTICAL_IN:"
        "case HPDF_TS_BOX_OUT:"
        "case HPDF_TS_BOX_IN:"
        "case HPDF_TS_BLINDS_HORIZONTAL:"
        "case HPDF_TS_BLINDS_VERTICAL:"
        "case HPDF_TS_DISSOLVE:"
        "case HPDF_TS_GLITTER_RIGHT:"
        "case HPDF_TS_GLITTER_DOWN:"
        "case HPDF_TS_GLITTER_TOP_LEFT_TO_BOTTOM_RIGHT:"
        "case HPDF_TS_REPLACE:"
        "  SCM_RESULT = HPDF_Page_SetSlideShow(page->h, type, disp, trans);"
        "  break;"
        "default:"
        "  Scm_Error(\"\");"
        "  break;"
        "}"))

;;
;; Graphics
;;
(define-cproc hpdf-page-set-line-width (page::<hpdf-page> line_width::<float>)
  (body <ulong> "HPDF_Page_SetLineWidth(page->h, line_width);"))

(define-cproc hpdf-page-set-line-cap (page::<hpdf-page> cap::<hpdf-linecap>)
  (body <ulong> "HPDF_Page_SetLineCap(page->h, cap->h);"))

(define-cproc hpdf-page-set-line-join (page::<hpdf-page> join::<uint>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-get-stream-size\");"
        "switch (join) {"
        "case HPDF_MITER_JOIN:"
        "case HPDF_ROUND_JOIN:"
        "case HPDF_BEVEL_JOIN:"
        "  SCM_RESULT = HPDF_Page_SetLineJoin(page->h, join);"
        "  break;"
        "default:"
        "  /* error */"
        "  SCM_RESULT = 0;"
        "  Scm_Error(\"Invalid 2nd argument. it needs HPDF_MITER_JOIN or HPDF_ROUND_JOIN or HPDF_BEVEL_JOIN.\\n\");"
        "  break;"
        "}"))

(define-cproc hpdf-page-set-miter-limit (page::<hpdf-page> miter_limit::<float>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-page-set-miter-limit\");"
        "SCM_RESULT = HPDF_Page_SetMiterLimit(page->h, miter_limit);"))

;; FIXME
(define-cproc hpdf-page-set-dash (page::<hpdf-page> dash::<foreign-pointer> num_param::<uint> phase::<uint>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-page-set-dash\");"
        "SCM_RESULT = HPDF_Page_SetDash(page->h, SCM_FOREIGN_POINTER(dash)->ptr, num_param, phase);"))

(define-cproc hpdf-page-set-flat (page::<hpdf-page> flatness::<float>)
  (expr <ulong> "HPDF_Page_SetFlat(page->h, flatness)"))

(define-cproc hpdf-page-setextgstate (page::<hpdf-page> ext_gstate::<hpdf-extgstate>)
  (expr <ulong> "HPDF_Page_SetExtGState(page->h, ext_gstate->h)"))

;; Special graphic state operator
(define-cproc hpdf-page-gsave (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_GSave(page->h);"))

(define-cproc hpdf-page-grestore (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_GRestore(page->h);"))

(define-cproc hpdf-page-concat (page::<hpdf-page>
                                a::<float>
                                b::<float>
                                c::<float>
                                d::<float>
                                x::<float>
                                y::<float>)
  (body <ulong> "HPDF_Page_Concat(page->h, a, b, c, d, x, y);"))

;; Path construction operator
(define-cproc hpdf-page-moveto (page::<hpdf-page> x::<float> y::<float>)
  (body <ulong> "HPDF_Page_MoveTo(page->h, x, y);"))

(define-cproc hpdf-page-lineto (page::<hpdf-page> x::<float> y::<float>)
  (body <ulong> "HPDF_Page_LineTo(page->h, x, y);"))

(define-cproc hpdf-page-curveto (page::<hpdf-page> x1::<float> y1::<float> x2::<float> y2::<float> x3::<float> y3::<float>)
  (body <ulong> "HPDF_Page_CurveTo(page->h, x1, y1, x2, y2, x3, y3);"))

(define-cproc hpdf-page-curveto2 (page::<hpdf-page> x2::<float> y2::<float> x3::<float> y3::<float>)
  (body <ulong> "HPDF_Page_CurveTo2(page->h, x2, y2, x3, y3);"))

(define-cproc hpdf-page-curveto3 (page::<hpdf-page> x1::<float> y1::<float> x3::<float> y3::<float>)
  (body <ulong> "HPDF_Page_CurveTo2(page->h, x1, y1, x3, y3);"))

(define-cproc hpdf-page-close-path (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_ClosePath(page->h);"))

(define-cproc hpdf-page-rectangle (page::<hpdf-page> x::<float> y::<float> width::<float> height::<float>)
  (body <ulong> "HPDF_Page_Rectangle(page->h, x, y, width, height);"))

;; Path painting operator
(define-cproc hpdf-page-stroke (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_Stroke(page->h);"))

(define-cproc hpdf-page-close-path-stroke (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_ClosePathStroke(page->h);"))

(define-cproc hpdf-page-fill (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_Fill(page->h);"))

(define-cproc hpdf-page-eo-fill (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_Eofill(page->h);"))

(define-cproc hpdf-page-fill-stroke (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_FillStroke(page->h);"))

(define-cproc hpdf-page-eofill-stroke (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_EofillStroke(page->h);"))

(define-cproc hpdf-page-close-path-fill-stroke (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_ClosePathFillStroke(page->h);"))

(define-cproc hpdf-page-close-path-eofill-stroke (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_ClosePathEofillStroke(page->h);"))

(define-cproc hpdf-page-end-path (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_EndPath(page->h);"))

;; Clipping paths operator
(define-cproc hpdf-page-clip (page::<hpdf-page>)
  (body <ulong> "SCM_RESULT = HPDF_Page_Clip(page->h);"))

(define-cproc hpdf-page-eoclip (page::<hpdf-page>)
  (expr <ulong> "HPDF_Page_Eoclip(page->h)"))

;; Text object operator
;; BT
(define-cproc hpdf-page-begin-text (page::<hpdf-page>)
  (expr <ulong> "HPDF_Page_BeginText(page->h)"))

;; ET
(define-cproc hpdf-page-end-text (page::<hpdf-page>)
  (expr <ulong> "HPDF_Page_EndText(page->h)"))

;; Text state
(define-cproc hpdf-page-set-char-space (page::<hpdf-page> value::<float>)
  (expr <ulong> "HPDF_Page_SetCharSpace(page->h, value)"))

(define-cproc hpdf-page-setwordspace (page::<hpdf-page> value::<float>)
  (expr <ulong> "HPDF_Page_SetWordSpace(page->h, value)"))

(define-cproc hpdf-page-set-horizontal-scalling (page::<hpdf-page> value::<float>)
  (expr <ulong> "HPDF_Page_SetWordSpace(page->h, value)"))

(define-cproc hpdf-page-set-text-leading (page::<hpdf-page> value::<float>)
  (expr <ulong> "HPDF_Page_SetTextLeading(page->h, value)"))

(define-cproc hpdf-page-set-font-and-size (page::<hpdf-page> font::<hpdf-font> size::<float>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-page-set-font-and-size\");"
        "SCM_RESULT = HPDF_Page_SetFontAndSize(page->h, font->h, size);"))

(define-cproc hpdf-page-set-text-rendering-mode (page::<hpdf-page> mode::<uint>)
  (expr <ulong> "HPDF_Page_SetTextRenderingMode(page->h, mode)"))

(define-cproc hpdf-page-set-text-rise (page::<hpdf-page> value::<float>)
  (expr <ulong> "HPDF_Page_SetTextRise(page->h, value)"))

;; Text positioning 
(define-cproc hpdf-page-move-text-pos (page::<hpdf-page> x::<float> y::<float>)
  (expr <ulong> "HPDF_Page_MoveTextPos(page->h, x, y)"))

(define-cproc hpdf-page-move-text-pos2 (page::<hpdf-page> x::<float> y::<float>)
  (expr <ulong> "HPDF_Page_MoveTextPos2(page->h, x, y)"))

(define-cproc hpdf-page-set-text-matrix (page::<hpdf-page> a::<float> b::<float> c::<float> d::<float> x::<float> y::<float>)
  (expr <ulong> "HPDF_Page_SetTextMatrix(page->h, a, b, c, d, x, y)"))

(define-cproc hpdf-page-move-to-nextline (page::<hpdf-page>)
  (expr <ulong> "HPDF_Page_MoveToNextLine(page->h)"))
  
;; Text showing
(define-cproc hpdf-page-show-text (page::<hpdf-page> text::<const-cstring>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-page-show-text\");"
        "#ifdef GAUCHE_HPDF_DEBUG"
        "char dummy[20];"
        "int i = 0;"
        "dummy[i] = 0x83;i++;"
        "dummy[i] = 0x41;i++;"
        "dummy[i] = 0x83;i++;"
        "dummy[i] = 0x81;i++;"
        "dummy[i] = 0x83;i++;"
        "dummy[i] = 0x93;i++;"
        "dummy[i] = 0x83;i++;"
        "dummy[i] = 0x7b;i++;"
        "dummy[i] = 0x90;i++;"
        "dummy[i] = 0xd4;i++;"
        "dummy[i] = 0;i++;"
        "dummy[i] = 0;i++;"
        "dummy[i] = 0;i++;"
        "i = 0;"
        "char *p = text;"
        "fprintf(stderr, \"text entry:\", text);"
        "while (i < 20) {"
        "  fprintf(stderr, \"hex: 0x%02x int:%6d\\n\", text[i], text[i]);"
        "  i++;"
        "}"
        "i = 0;"
        "fprintf(stderr, \"dummy entry:\", dummy);"
        "while (i < 20) {"
        "  fprintf(stderr, \"hex: 0x%02x int:%6d\\n\", dummy[i], dummy[i]);"
        "  i++;"
        "}"
        "#endif"
        "if (strlen(text) > 0) {"
        "  SCM_RESULT = HPDF_Page_ShowText(page->h, text);"
        "} else {"
        "  SCM_RESULT = 0;"
        "}"
        ))

(define-cproc hpdf-page-show-text-next-line (page::<hpdf-page> text::<const-cstring>)
  (expr <ulong> "HPDF_Page_ShowTextNextLine(page->h, text)"))

(define-cproc hpdf-page-show-text-next-line-ex (page::<hpdf-page> word_space::<float> char_space::<float> text::<const-cstring>)
  (expr <ulong> "HPDF_Page_ShowTextNextLineEx(page->h, word_space, char_space, text)"))

;; Color showing
(define-cproc hpdf-page-set-gray-fill (page::<hpdf-page> gray::<float>)
  (expr <ulong> "HPDF_Page_SetGrayFill(page->h, gray)"))

(define-cproc hpdf-page-set-gray-stroke (page::<hpdf-page> gray::<float>)
  (expr <ulong> "HPDF_Page_SetGrayStroke(page->h, gray)"))

(define-cproc hpdf-page-set-rgb-fill (page::<hpdf-page> r::<float> g::<float> b::<float>)
  (expr <ulong> "HPDF_Page_SetRGBFill(page->h, r, g, b)"))

(define-cproc hpdf-page-set-rgb-stroke (page::<hpdf-page> r::<float> g::<float> b::<float>)
  (expr <ulong> "HPDF_Page_SetRGBStroke(page->h, r, g, b)"))

(define-cproc hpdf-page-set-cmyk-fill (page::<hpdf-page> c::<float> m::<float> y::<float> k::<float>)
  (expr <ulong> "HPDF_Page_SetCMYKFill(page->h, c, m, y, k)"))

(define-cproc hpdf-page-set-cmyk-stroke (page::<hpdf-page> c::<float> m::<float> y::<float> k::<float>)
  (expr <ulong> "HPDF_Page_SetCMYKStroke(page->h, c, m, y, k)"))

;; XObjects
(define-cproc hpdf-page-execute-xobject (page::<hpdf-page> obj::<hpdf-xobject>)
  (expr <ulong> "HPDF_Page_ExecuteXObject(page->h, obj->h)"))

(define-cproc hpdf-page-drawimage (page::<hpdf-page>) (body <float> ""))
(define-cproc hpdf-page-circle (page::<hpdf-page>) (body <float> ""))
(define-cproc hpdf-page-arc (page::<hpdf-page>) (body <float> ""))
(define-cproc hpdf-page-textout (page::<hpdf-page>) (body <float> ""))
(define-cproc hpdf-page-textrect (page::<hpdf-page>) (body <float> ""))


;;
;; Font Handling
;;
(define-cproc hpdf-get-font (doc::<hpdf-doc> font::<const-cstring> enc::<const-cstring>)
  (body <hpdf-font>?
        "GAUCHE_HPDF_FUNC(\"hpdf-get-font\");"
        "ScmHpdfFont *h = SCM_NEW(ScmHpdfFont);"
        "SCM_SET_CLASS(h, SCM_CLASS_HPDF_FONT);"
        "if (strlen(enc) > 0) {"
        "  h->h = HPDF_GetFont(doc->h, font, enc);"
        "} else {"
        "  h->h = HPDF_GetFont(doc->h, font, NULL);"
        "}"
        "if (h->h) {"
        "  SCM_RESULT = h;"
        "} else {"
        "  GAUCHE_HPDF_WARN(\"error in HPDF_GetFont\");"
        "  SCM_RESULT = SCM_NIL;"
        "}"))

(define-cproc hpdf-load-type1-font-from-file (doc::<hpdf-doc> afm_file_name::<const-cstring> data_file_name::<const-cstring>)
  (body <const-cstring>?
        "GAUCHE_HPDF_FUNC(\"hpdf-load-type1-font-from-file\");"
        "/* afm, pfb*/"
        "SCM_RESULT = HPDF_LoadType1FontFromFile(doc->h, afm_file_name, data_file_name);"))

(define-cproc hpdf-load-ttf-font-from-file (doc::<hpdf-doc> file::<const-cstring> embedding::<boolean>)
  (body <const-cstring>?
        "GAUCHE_HPDF_FUNC(\"hpdf-load-ttf-font-from-file\");"
        "const char *p = HPDF_LoadTTFontFromFile(doc->h, file, embedding);"
        "/* GAUCHE_HPDF_HEX('funcp', p);*/"
        "SCM_RESULT = p;"
        "if (p) {"
        "} else {"
        "  if (embedding) {"
        "     Scm_Error(\"can't load True Type Font(embedding %s) into PDF.\", file);"
        "  } else {"
        "     Scm_Error(\"can't load True Type Font(%s) into PDF.\", file);"
        "  }"
        "}"))

(define-cproc hpdf-load-ttf-font-from-file2 (doc::<hpdf-doc> file::<const-cstring> index::<uint> embedding::<boolean>)
  (body <const-cstring>?
        "GAUCHE_HPDF_FUNC(\"hpdf-load-ttf-font-from-file2\");"
        "SCM_RESULT = HPDF_LoadTTFontFromFile2(doc->h, file, index, embedding);"))

(define-cproc hpdf-add-page-label (doc::<hpdf-doc> page-num::<uint> page-style::<uint> first-page::<uint> prefix::<const-cstring>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-add-page-label\");"
        ""))

(define-cproc hpdf-use-jp-fonts (doc::<hpdf-doc>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-use-jp-fonts\");"
        "SCM_RESULT = HPDF_UseJPFonts(doc->h);"))

(define-cproc hpdf-use-kr-fonts (doc::<hpdf-doc>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-use-kr-fonts\");"
        "SCM_RESULT = HPDF_UseKRFonts(doc->h);"))

(define-cproc hpdf-use-cns-fonts (doc::<hpdf-doc>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-use-cns-fonts\");"
        "SCM_RESULT = HPDF_UseCNSFonts(doc->h);"))

(define-cproc hpdf-use-cnt-fonts (doc::<hpdf-doc>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-use-cnt-fonts\");"
        "SCM_RESULT = HPDF_UseCNTFonts(doc->h);"))

;;
;; Outline
;;
(define-cproc hpdf-create-outline (doc::<hpdf-doc> parent::<hpdf-outline>? title::<const-cstring> encoder::<hpdf-encoder>?)
  (body <hpdf-outline>?
        "GAUCHE_HPDF_FUNC(\"hpdf-create-outline\");"
        "ScmHpdfOutline *h = SCM_NEW(ScmHpdfOutline);"
        "SCM_SET_CLASS(h, SCM_CLASS_HPDF_OUTLINE);"
        "if (parent) {"
        "  if (encoder) {"
        "    h->h = HPDF_CreateOutline(doc->h, parent->h, title, encoder->h);"
        "  } else {"
        "    h->h = HPDF_CreateOutline(doc->h, parent->h, title, NULL);"
        "  }"
        "} else {"
        "  if (encoder) {"
        "    h->h = HPDF_CreateOutline(doc->h, NULL, title, encoder->h);"
        "  } else {"
        "    h->h = HPDF_CreateOutline(doc->h, NULL, title, NULL);"
        "  }"
        "}"
        "SCM_RESULT = h;"))

(define-cproc hpdf-outline-set-opened (out::<hpdf-outline> opened::<boolean>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-set-opened\");"
        "SCM_RESULT = HPDF_Outline_SetOpened(out->h, opened);"))

(define-cproc hpdf-outline-set-destination (out::<hpdf-outline> dst::<hpdf-destination>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-set-destination\");"
        "SCM_RESULT = HPDF_Outline_SetDestination(out->h, dst->h);"))

;;
;; Destination
;;
(define-cproc hpdf-page-create-destination (page::<hpdf-page>)
  (body <hpdf-destination>
        "GAUCHE_HPDF_FUNC(\"hpdf-page-create-destination\");"
        "ScmHpdfDestination *h = SCM_NEW(ScmHpdfDestination);"
        "SCM_SET_CLASS(h, SCM_CLASS_HPDF_DESTINATION);"
        "h->h = HPDF_Page_CreateDestination(page->h);"
        "SCM_RESULT = h;"))

(define-cproc hpdf-destination-set-xyz (dst::<hpdf-destination> left::<float> top::<float> zoom::<float>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-destination-set-xyz\");"
        "SCM_RESULT = HPDF_Destination_SetXYZ(dst->h, left, top, zoom);"))

(define-cproc hpdf-destination-set-fit (dst::<hpdf-destination>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-destination-set-fit\");"
        "SCM_RESULT = HPDF_Destination_SetFit(dst->h);"))

(define-cproc hpdf-destination-set-fith (dst::<hpdf-destination> top::<float>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-destination-set-fith\");"
        "SCM_RESULT = HPDF_Destination_SetFitH(dst->h, top);"))

(define-cproc hpdf-destination-set-fitv (dst::<hpdf-destination> left::<float>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-destination-set-fitv\");"
        "SCM_RESULT = HPDF_Destination_SetFitV(dst->h, left);"))

(define-cproc hpdf-destination-set-fitr (dst::<hpdf-destination> left::<float> bottom::<float> right::<float> top::<float>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-destination-set-fitr\");"
        "SCM_RESULT = HPDF_Destination_SetFitR(dst->h, left, bottom, right, top);"))

(define-cproc hpdf-destination-set-fitb (dst::<hpdf-destination>)
  (body <ulong> "HPDF_Destination_SetFitB(dst->h);"))

(define-cproc hpdf-destination-set-fitbh (dst::<hpdf-destination> top::<float>)
  (body <ulong> "HPDF_Destination_SetFitBH(dst->h, top);"))

(define-cproc hpdf-destination-set-fitbv (dst::<hpdf-destination> left::<float>)
  (body <ulong> "HPDF_Destination_SetFitBV(dst->h, left);"))

;;
;; Encoding Handler
;;
(define-cproc hpdf-get-encoder (doc::<hpdf-doc> encoding_name::<const-cstring>)
  (body <hpdf-encoder>
        "  ScmHpdfEncoder *h = SCM_NEW(ScmHpdfEncoder);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_ENCODER);
  h->h = HPDF_GetEncoder(doc->h, encoding_name);
  SCM_RESULT = h;"))

(define-cproc hpdf-get-current-encoder (doc::<hpdf-doc>)
  (body <hpdf-encoder>
        "GAUCHE_HPDF_FUNC(\"hpdf-get-current-encoder\");"
        "ScmHpdfEncoder *h = SCM_NEW(ScmHpdfEncoder);"
        "SCM_SET_CLASS(h, SCM_CLASS_HPDF_ENCODER);"
        "h->h = HPDF_GetCurrentEncoder(doc->h);"
        "SCM_RESULT = h;"))

(define-cproc hpdf-set-current-encoder (doc::<hpdf-doc> encoding_name::<const-cstring>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-set-current-encoder\");"
        "SCM_RESULT = HPDF_SetCurrentEncoder(doc->h, encoding_name);"))

(define-cproc hpdf-encoder-get-type (enc::<hpdf-encoder>)
  (body <fixnum>
        "GAUCHE_HPDF_FUNC(\"hpdf-encoder-get-type\");"
        "SCM_RESULT = HPDF_Encoder_GetType(enc->h);"))

(define-cproc hpdf-encoder-get-byte-type (enc::<hpdf-encoder> text::<const-cstring> index::<uint>)
  (body <fixnum>
        "GAUCHE_HPDF_FUNC(\"hpdf-encoder-get-byte-type\");"
        "SCM_RESULT = HPDF_Encoder_GetByteType(enc->h, text, index);"))

(define-cproc hpdf-encoder-get-unicode (enc::<hpdf-encoder> code::<uint16>)
  (body <uint16> "SCM_RESULT = HPDF_Encoder_GetUnicode(enc->h, code);"))

(define-cproc hpdf-encoder-get-writing-mode (enc::<hpdf-encoder>)
  (body <fixnum> "SCM_RESULT = HPDF_Encoder_GetWritingMode(enc->h);"))

(define-cproc hpdf-use-jp-encodings (doc::<hpdf-doc>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-use-jp-encodings\");"
        "SCM_RESULT = HPDF_UseJPEncodings(doc->h);"))

(define-cproc hpdf-use-kr-encodings (doc::<hpdf-doc>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-use-kr-encodings\");"
        "SCM_RESULT = HPDF_UseKREncodings(doc->h);"))

(define-cproc hpdf-use-cns-encodings (doc::<hpdf-doc>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-use-cns-encodings\");"
        "SCM_RESULT = HPDF_UseCNSEncodings(doc->h);"))

(define-cproc hpdf-use-cnt-encodings (doc::<hpdf-doc>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-use-cnt-encodings\");"
        "SCM_RESULT = HPDF_UseCNTEncodings(doc->h);"))

;;
;; Annotation
;;
(define-cproc hpdf-page-create-text-annot (page::<hpdf-page> rect::<hpdf-rect> text::<const-cstring> encoder::<hpdf-encoder>)
  (body <hpdf-annotation>
        "GAUCHE_HPDF_FUNC(\"hpdf-page-create-text-annot\");"
        "ScmHpdfAnnotation *h = SCM_NEW(ScmHpdfAnnotation);"
        "SCM_SET_CLASS(h, SCM_CLASS_HPDF_ANNOTATION);"
        "h->h = HPDF_Page_CreateTextAnnot(page->h, rect->h, text, encoder->h);"
        "SCM_RESULT = h;"))

(define-cproc hpdf-page-create-link-annot (page::<hpdf-page> rect::<hpdf-rect> dst::<hpdf-destination>)
  (body <hpdf-annotation>
        "GAUCHE_HPDF_FUNC(\"hpdf-page-create-link-annot\");"
        "ScmHpdfAnnotation *h = SCM_NEW(ScmHpdfAnnotation);"
        "SCM_SET_CLASS(h, SCM_CLASS_HPDF_ANNOTATION);"
        "h->h = HPDF_Page_CreateLinkAnnot(page->h, rect->h, dst->h);"
        "SCM_RESULT = h;"))

(define-cproc hpdf-page-create-uri-link-annot (page::<hpdf-page> rect::<hpdf-rect> uri::<const-cstring>)
  (body <hpdf-annotation>
        "GAUCHE_HPDF_FUNC(\"hpdf-page-create-uri-link-annot\");"
        "ScmHpdfAnnotation *h = SCM_NEW(ScmHpdfAnnotation);"
        "SCM_SET_CLASS(h, SCM_CLASS_HPDF_ANNOTATION);"
        "h->h = HPDF_Page_CreateURILinkAnnot(page->h, rect->h, uri);"
        "SCM_RESULT = h;"))

(define-cproc hpdf-link-annot-set-highlight-mode (annot::<hpdf-annotation> mode::<fixnum>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-link-annot-set-highlight-mode\");"
        "SCM_RESULT = HPDF_LinkAnnot_SetHighlightMode (annot->h, mode);"))

(define-cproc hpdf-link-annot-set-border-style (annot::<hpdf-annotation> width::<float> dash_on::<uint16> dash_off::<uint16>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-link-annot-set-border-style\");"
        "SCM_RESULT = HPDF_LinkAnnot_SetBorderStyle (annot->h, width, dash_on, dash_off);"))

(define-cproc hpdf-text-annot-set-icon (annot::<hpdf-annotation> icon::<fixnum>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-text-annot-set-icon\");"
        "SCM_RESULT = HPDF_TextAnnot_SetIcon (annot->h, icon);"))

(define-cproc hpdf-text-annot-set-opened (annot::<hpdf-annotation> opened::<boolean>)
  (body <ulong> "SCM_RESULT = HPDF_TextAnnot_SetOpened (annot->h, opened);"))

;;
;; Image Data
;;
(define-cproc hpdf-load-png-image-from-file (doc::<hpdf-doc> filename::<const-cstring>)
  (body <hpdf-image>
        "  ScmHpdfImage *h = SCM_NEW(ScmHpdfImage);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_IMAGE);
  h->h = HPDF_LoadPngImageFromFile(doc->h, filename);
  SCM_RESULT = h;"))

(define-cproc hpdf-load-png-image-from-file2 (doc::<hpdf-doc> filename::<const-cstring>)
  (body <hpdf-image>
        "  ScmHpdfImage *h = SCM_NEW(ScmHpdfImage);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_IMAGE);
  h->h = HPDF_LoadPngImageFromFile2(doc->h, filename);
  SCM_RESULT = h;"))

(define-cproc hpdf-load-jpeg-image-from-file (doc::<hpdf-doc> filename::<const-cstring>)
  (body <hpdf-image>
        "  ScmHpdfImage *h = SCM_NEW(ScmHpdfImage);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_IMAGE);
  h->h = HPDF_LoadJpegImageFromFile(doc->h, filename);
  SCM_RESULT = h;"))

(define-cproc hpdf-load-raw-image-from-file (doc::<hpdf-doc> filename::<const-cstring> width::<uint> height::<uint> color_space::<fixnum>)
  (body <hpdf-image>
        "  ScmHpdfImage *h = SCM_NEW(ScmHpdfImage);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_IMAGE);
  h->h = HPDF_LoadRawImageFromFile(doc->h, filename, width, height, color_space);
  SCM_RESULT = h;"))

;; FIXME
(define-cproc hpdf-load-raw-image-from-mem (doc::<hpdf-doc> buf::<const-cstring> width::<uint> height::<uint> color_space::<fixnum> bits_per_component::<uint>)
  (body <hpdf-image>
        "  ScmHpdfImage *h = SCM_NEW(ScmHpdfImage);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_IMAGE);
  h->h = HPDF_LoadRawImageFromMem(doc->h, buf, width, height, color_space, bits_per_component);
  SCM_RESULT = h;"))

(define-cproc hpdf-image-get-size (image::<hpdf-image>)
  (body <hpdf-point>
        "  ScmHpdfPoint *h = SCM_NEW(ScmHpdfPoint);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_POINT);
  h->h = HPDF_Image_GetSize(image->h);
  SCM_RESULT = h;"))

;; FIXME
;;(define-cproc hpdf-image-get-size2 (image::<hpdf-image> size::<hpdf-point>)
;;  (body <ulong> "SCM_RESULT = HPDF_Image_GetSize2 (image->h, size->h);"))

(define-cproc hpdf-image-get-width (img::<hpdf-image>)
  (expr <uint> "SCM_RESULT = HPDF_Image_GetWidth(img->h)"))

(define-cproc hpdf-image-get-height (image::<hpdf-image>)
  (expr <uint> "SCM_RESULT = HPDF_Image_GetHeight(image->h)"))

(define-cproc hpdf-image-get-bits-per-component (image::<hpdf-image>)
  (expr <uint> "SCM_RESULT = HPDF_Image_GetBitsPerComponent(image->h)"))

(define-cproc hpdf-image-get-color-space (image::<hpdf-image>)
  (expr <const-cstring> "SCM_RESULT = HPDF_Image_GetColorSpace(image->h)"))

(define-cproc hpdf-image-set-color-mask (image::<hpdf-image> rmin::<uint> rmax::<uint> gmin::<uint> gmax::<uint> bmin::<uint> bmax::<uint>)
  (expr <ulong> "SCM_RESULT = HPDF_Image_SetColorMask(image->h, rmin, rmax, gmin, gmax, bmin, bmax)"))

(define-cproc hpdf-image-set-mask-image (image::<hpdf-image> mask_image::<hpdf-image>)
  (expr <ulong> "SCM_RESULT = HPDF_Image_SetMaskImage(image->h, mask_image->h)"))


;; Info Dictionary
(define-cproc hpdf-set-info-attr (doc::<hpdf-doc> type::<fixnum> value::<const-cstring>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-set-info-attr\");"
        "switch (type) {"
        "case HPDF_INFO_AUTHOR:"
        "case HPDF_INFO_CREATOR:"
        "case HPDF_INFO_TITLE:"
        "case HPDF_INFO_SUBJECT:"
        "case HPDF_INFO_KEYWORDS:"
        "  break;"
        "default:"
        "  break;"
        "}"
        "SCM_RESULT = HPDF_SetInfoAttr(doc->h, type, value);"))

(define-cproc hpdf-get-info-attr (doc::<hpdf-doc> type::<fixnum>)
  (body <const-cstring>
        "GAUCHE_HPDF_FUNC(\"hpdf-get-info-attr\");"
        "switch (type) {"
        "case HPDF_INFO_CREATION_DATE:"
        "case HPDF_INFO_MOD_DATE:"
        "case HPDF_INFO_AUTHOR:"
        "case HPDF_INFO_CREATOR:"
        "case HPDF_INFO_TITLE:"
        "case HPDF_INFO_SUBJECT:"
        "case HPDF_INFO_KEYWORDS:"
        "  break;"
        "default:"
        "  Scm_Error(\"Invalid 2nd argument.\");"
        "  break;"
        "}"
        "SCM_RESULT = HPDF_GetInfoAttr(doc->h, type);"))

(define-cproc hpdf-set-info-date-attr (doc::<hpdf-doc> type::<fixnum> date::<hpdf-date>)
  (expr <ulong> "SCM_RESULT = HPDF_SetInfoDateAttr(doc->h, type, date->h)"))

;; encryption
(define-cproc hpdf-set-password (doc::<hpdf-doc> owner_passwd::<const-cstring> user_passwd::<const-cstring>)
  (expr <ulong> "SCM_RESULT = HPDF_SetPassword(doc->h, owner_passwd, user_passwd)"))

(define-cproc hpdf-set-permission (doc::<hpdf-doc> permission::<uint>)
  (body <ulong>
        "switch(permission) {"
        "case HPDF_ENABLE_READ:"
        "case HPDF_ENABLE_PRINT:"
        "case HPDF_ENABLE_EDIT_ALL:"
        "case HPDF_ENABLE_COPY:"
        "case HPDF_ENABLE_EDIT:"
        "  break;"
        "default:"
        "  break;"
        "}"
        "SCM_RESULT = HPDF_SetPermission(doc->h, permission);"))

(define-cproc hpdf-set-encryption-mode (doc::<hpdf-doc> mode::<fixnum> key_len::<uint>)
  (expr <ulong> "SCM_RESULT = HPDF_SetEncryptionMode(doc->h, mode, key_len)"))

;; compression
(define-cproc hpdf-set-compression-mode (doc::<hpdf-doc> mode::<uint>)
  (body <ulong>
        "switch (mode) {"
        "case HPDF_COMP_NONE:"
        "case HPDF_COMP_TEXT:"
        "case HPDF_COMP_IMAGE:"
        "case HPDF_COMP_METADATA:"
        "case HPDF_COMP_ALL:"
        "  SCM_RESULT = HPDF_SetCompressionMode(doc->h, mode);"
        "  break;"
        "default:"
        "  Scm_Error(\"\");"
        "  break;"
        "}"))

;; font
(define-cproc hpdf-font-get-font-name (font::<hpdf-font>)
  (body <const-cstring>?
        "GAUCHE_HPDF_FUNC(\"hpdf-font-get-font-name\");"
        "SCM_RESULT = HPDF_Font_GetFontName(font->h);"))

(define-cproc hpdf-font-get-encoding-name (font::<hpdf-font>)
  (body <const-cstring>
        "GAUCHE_HPDF_FUNC(\"hpdf-font-get-encoding-name\");"
        "SCM_RESULT = HPDF_Font_GetEncodingName(font->h);"))

(define-cproc hpdf-font-get-unicode-width (font::<hpdf-font> code::<uint16>)
  (body <int>
        "GAUCHE_HPDF_FUNC(\"hpdf-font-get-unicode-width\");"
        "SCM_RESULT = HPDF_Font_GetUnicodeWidth(font->h, code);"))

(define-cproc hpdf-font-get-bbox (font::<hpdf-font>)
  (body <hpdf-box>
        "GAUCHE_HPDF_FUNC(\"hpdf-font-get-bbox\");"
        "ScmHpdfBox *h = SCM_NEW(ScmHpdfBox);"
        "SCM_SET_CLASS(h, SCM_CLASS_HPDFBOX);"
        "h->h = HPDF_Font_GetBBox(font->h);"
        "SCM_RESULT = h;"))

(define-cproc hpdf-font-get-ascent (font::<hpdf-font>)
  (expr <int> "SCM_RESULT = HPDF_Font_GetAscent(font->h)"))

(define-cproc hpdf-font-get-descent (font::<hpdf-font>)
  (expr <int> "SCM_RESULT = HPDF_Font_GetDescent(font->h)"))

(define-cproc hpdf-font-get-xheight (font::<hpdf-font>)
  (expr <uint> "SCM_RESULT = HPDF_Font_GetXHeight(font->h)"))

(define-cproc hpdf-font-get-cap-height (font::<hpdf-font>)
  (expr <uint> "SCM_RESULT = HPDF_Font_GetCapHeight(font->h)"))

(define-cproc hpdf-font-text-width (font::<hpdf-font> text::<const-cstring> len::<uint>)
  (body <hpdf-textwidth>
        "  ScmHpdfTextWidth *h = SCM_NEW(ScmHpdfTextWidth);
  SCM_SET_CLASS(h, SCM_CLASS_HPDFTEXTWIDTH);
  h->h = HPDF_Font_TextWidth(font->h, text, len);
  SCM_RESULT = h;"))

(define-cproc hpdf-font-measure-text (font::<hpdf-font>
                                      text::<foreign-pointer>
                                      len::<uint> width::<float> font_size::<float>
                                      char_space::<float> word_space::<float> wordwrap::<float>
                                      real_width::<foreign-pointer>)
  (body <uint>
        "HPDF_Font_MeasureText(font->h,"
        "SCM_FOREIGN_POINTER(text)->ptr, len, width, font_size, char_space, word_space, wordwrap,"
        "SCM_FOREIGN_POINTER(real_width)->ptr);"))

;; extended graphics state
(define-cproc hpdf-create-ext-gstate (doc::<hpdf-doc>)
  (body <hpdf-extgstate>
        "  ScmHpdfExtGState *h = SCM_NEW(ScmHpdfExtGState);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_EXTGSTATE);
  h->h = HPDF_CreateExtGState(doc->h);
  SCM_RESULT = h;"))

(define-cproc hpdf-ext-gstate-set-alpha-stroke (ext_gstate::<hpdf-extgstate> value::<float>)
  (expr <ulong> "HPDF_ExtGState_SetAlphaStroke(ext_gstate->h, value)"))

(define-cproc hpdf-ext-gstate-set-alpha-fill (ext_gstate::<hpdf-extgstate> value::<float>)
  (expr <ulong> "HPDF_ExtGState_SetAlphaFill(ext_gstate->h, value)"))

(define-cproc hpdf-ext-gstate-set-blend-mode (ext_gstate::<hpdf-extgstate> mode::<fixnum>)
  (expr <ulong> "HPDF_ExtGState_SetBlendMode(ext_gstate->h, mode)"))

;;
(define-cproc hpdf-page-text-width (page::<hpdf-page> text::<const-cstring>)
  (expr <float> "HPDF_Page_TextWidth(page->h, text)"))

"
/*

HPDF_EXPORT(HPDF_UINT)
HPDF_Page_MeasureText  (HPDF_Page    page,
                        const char  *text,
                        HPDF_REAL    width,
                        HPDF_BOOL    wordwrap,
                        HPDF_REAL   *real_width);

*/
"

(define-cproc hpdf-page-get-width (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetWidth(page->h)"))

(define-cproc hpdf-page-get-height (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetHeight(page->h)"))

(define-cproc hpdf-page-get-gmode (page::<hpdf-page>)
  (expr <uint16> "HPDF_Page_GetGMode(page->h)"))

(define-cproc hpdf-page-get-current-pos (page::<hpdf-page>)
  (body <hpdf-point>
        "  ScmHpdfPoint *h = SCM_NEW(ScmHpdfPoint);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_POINT);
  h->h = HPDF_Page_GetCurrentPos(page->h);
  SCM_RESULT = h;"))

;; FIXME
;; (define-cproc hpdf-page-get-current-pos2 (page::<hpdf-page> pos::<hpdf-point>)
;;   (body <ulong> "  SCM_RESULT = HPDF_Page_GetCurrentPos2(page->h, pos->h);"))

(define-cproc hpdf-page-get-current-text-pos (page::<hpdf-page>)
  (body <hpdf-point>
        "  ScmHpdfPoint *h = SCM_NEW(ScmHpdfPoint);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_POINT);
  h->h = HPDF_Page_GetCurrentTextPos(page->h);
  SCM_RESULT = h;"))

;; FIXME
;; (define-cproc hpdf-page-get-current-text-pos2 (page::<hpdf-page> pos::<hpdf-point>)
;;  (body <ulong> "  SCM_RESULT = HPDF_Page_GetCurrentTextPos2(page->h, pos->h);"))

(define-cproc hpdf-page-get-current-font (page::<hpdf-page>)
  (body <hpdf-font>
        "  ScmHpdfFont *h = SCM_NEW(ScmHpdfFont);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_FONT);
  h->h = HPDF_Page_GetCurrentFont(page->h);
  SCM_RESULT = h;"))


(define-cproc hpdf-page-get-current-font-size (page::<hpdf-page>)
  (expr <float>  "HPDF_Page_GetCurrentFontSize(page->h)"))

(define-cproc hpdf-page-get-transmatrix (page::<hpdf-page>)
  (body <hpdf-transmatrix>
        "  ScmHpdfTransMatrix *h = SCM_NEW(ScmHpdfTransMatrix);"
        "SCM_SET_CLASS(h, SCM_CLASS_HPDF_TRANSMATRIX);"
        "h->h = HPDF_Page_GetTransMatrix(page->h);"
        "SCM_RESULT = h;"))

(define-cproc hpdf-page-get-line-width (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetLineWidth(page->h)"))

(define-cproc hpdf-page-get-line-cap (page::<hpdf-page>)
  (body <hpdf-linecap>
        "  ScmHpdfLineCap *h = SCM_NEW(ScmHpdfLineCap);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_LINECAP);
  h->h = HPDF_Page_GetLineCap(page->h);
  SCM_RESULT = h;"))

(define-cproc hpdf-page-get-line-join (page::<hpdf-page>)
  (body <hpdf-linejoin>
        "  ScmHpdfLineJoin *h = SCM_NEW(ScmHpdfLineJoin);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_LINEJOIN);
  h->h = HPDF_Page_GetLineJoin(page->h);
  SCM_RESULT = h;"))

(define-cproc hpdf-page-get-miter-limit (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetMiterLimit(page->h)"))

(define-cproc hpdf-page-get-dash (page::<hpdf-page>)
  (body <hpdf-dashmode>
        "  ScmHpdfDashMode *h = SCM_NEW(ScmHpdfDashMode);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_DASHMODE);
  h->h = HPDF_Page_GetDash(page->h);
  SCM_RESULT = h;"))

(define-cproc hpdf-page-get-flat (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetFlat(page->h)"))

(define-cproc hpdf-page-get-char-space (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetCharSpace(page->h)"))

(define-cproc hpdf-page-get-word-space (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetWordSpace(page->h)"))

(define-cproc hpdf-page-get-horizontal-scalling (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetHorizontalScalling(page->h)"))

(define-cproc hpdf-page-get-text-leading (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetTextLeading(page->h)"))

(define-cproc hpdf-page-get-text-rendering-mode (page::<hpdf-page>)
  (expr <fixnum> "HPDF_Page_GetTextRenderingMode(page->h)"))

;; obsolete
(define-cproc hpdf-page-get-text-raise (page::<hpdf-page>)
  (body <float>
        "Scm_Printf(SCM_CURERR, \"Warning: hpdf-page-get-text-raise is obsolete. use hpdf-page-get-text-rise instead.\");"
        "  SCM_RESULT = HPDF_Page_GetTextRaise(page->h);"))

(define-cproc hpdf-page-get-text-rise (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetTextRise(page->h)"))

(define-cproc hpdf-page-get-rgb-fill (page::<hpdf-page>)
  (body <hpdf-rgbcolor>
        "  ScmHpdfRGBColor *h = SCM_NEW(ScmHpdfRGBColor);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_RGBCOLOR);
  h->h = HPDF_Page_GetRGBFill(page->h);
  SCM_RESULT = h;"))

(define-cproc hpdf-page-get-rgb-stroke (page::<hpdf-page>)
  (body <hpdf-rgbcolor>
        "  ScmHpdfRGBColor *h = SCM_NEW(ScmHpdfRGBColor);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_RGBCOLOR);
  h->h = HPDF_Page_GetRGBStroke(page->h);
  SCM_RESULT = h;"))

(define-cproc hpdf-page-get-cmyk-fill (page::<hpdf-page>)
  (body <hpdf-cmykcolor>
        "  ScmHpdfCMYKColor *h = SCM_NEW(ScmHpdfCMYKColor);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_CMYKCOLOR);
  h->h = HPDF_Page_GetCMYKFill(page->h);
  SCM_RESULT = h;"))

(define-cproc hpdf-page-get-cmyk-stroke (page::<hpdf-page>)
  (body <hpdf-cmykcolor>
        "  ScmHpdfCMYKColor *h = SCM_NEW(ScmHpdfCMYKColor);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_CMYKCOLOR);
  h->h = HPDF_Page_GetCMYKStroke(page->h);
  SCM_RESULT = h;"))


(define-cproc hpdf-page-get-gray-fill (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetGrayFill(page->h)"))

(define-cproc hpdf-page-get-gray-stroke (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetGrayStroke(page->h)"))

(define-cproc hpdf-page-get-stroking-color-space (page::<hpdf-page>)
  (expr <fixnum> "HPDF_Page_GetStrokingColorSpace(page->h)"))

(define-cproc hpdf-page-get-filling-color-space (page::<hpdf-page>)
  (expr <fixnum> "HPDF_Page_GetFillingColorSpace(page->h)"))

(define-cproc hpdf-page-get-textmatrix (page::<hpdf-page>)
  (body <hpdf-transmatrix>
        "  ScmHpdfTransMatrix *h = SCM_NEW(ScmHpdfTransMatrix);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_TRANSMATRIX);
  h->h = HPDF_Page_GetTextMatrix(page->h);
  SCM_RESULT = h;"))

(define-cproc hpdf-page-get-gstate-depth (page::<hpdf-page>)
  (expr <uint> "HPDF_Page_GetGStateDepth(page->h)"))

;;
;; GRAPHICS OPERATORS
;;

;;
;; Constants
;;
(define-enum HPDF_TRUE)
(define-enum HPDF_FALSE)
(define-enum HPDF_OK)
(define-enum HPDF_NOERROR)

;; buffer size which is required when we convert to character string.
(define-enum HPDF_TMP_BUF_SIZ)
(define-enum HPDF_SHORT_BUF_SIZ)
(define-enum HPDF_REAL_LEN)
(define-enum HPDF_INT_LEN)
(define-enum HPDF_TEXT_DEFAULT_LEN)
(define-enum HPDF_UNICODE_HEADER_LEN)
(define-enum HPDF_DATE_TIME_STR_LEN)
;; length of each item defined in PDF
(define-enum HPDF_BYTE_OFFSET_LEN)
(define-enum HPDF_OBJ_ID_LEN)
(define-enum HPDF_GEN_NO_LEN)

;; default value of Graphic State 
(define-constant HPDF_DEF_FONT (c "SCM_MAKE_STR(HPDF_DEF_FONT)"))
(define-enum HPDF_DEF_PAGE_LAYOUT)
(define-enum HPDF_DEF_PAGE_MODE)
(define-enum HPDF_DEF_WORDSPACE)
(define-enum HPDF_DEF_CHARSPACE)
(define-enum HPDF_DEF_FONTSIZE)
(define-enum HPDF_DEF_HSCALING)
(define-enum HPDF_DEF_LEADING)
(define-enum HPDF_DEF_RENDERING_MODE)
(define-enum HPDF_DEF_RISE)
(define-enum HPDF_DEF_RAISE)
(define-enum HPDF_DEF_LINEWIDTH)
(define-enum HPDF_DEF_LINECAP)
(define-enum HPDF_DEF_LINEJOIN)
(define-enum HPDF_DEF_MITERLIMIT)
(define-enum HPDF_DEF_FLATNESS)
(define-enum HPDF_DEF_PAGE_NUM)

(define-enum HPDF_BS_DEF_WIDTH)

(define-enum HPDF_DEF_PAGE_WIDTH)
(define-enum HPDF_DEF_PAGE_HEIGHT)

(define-constant HPDF_VERSION_TEXT (c "SCM_MAKE_STR(HPDF_VERSION_TEXT)"))

;; compression mode
(define-enum  HPDF_COMP_NONE)
(define-enum  HPDF_COMP_TEXT)
(define-enum  HPDF_COMP_IMAGE)
(define-enum  HPDF_COMP_METADATA)
(define-enum  HPDF_COMP_ALL)
(define-enum  HPDF_COMP_MASK)

;; permission flags (only Revision 2 is supported)
(define-enum HPDF_ENABLE_READ)
(define-enum HPDF_ENABLE_PRINT)   
(define-enum HPDF_ENABLE_EDIT_ALL)
(define-enum HPDF_ENABLE_COPY)
(define-enum HPDF_ENABLE_EDIT)
;; alias 
(define-enum READ)
(define-enum PRINT)
(define-enum EDIT_ALL)
(define-enum COPY)
(define-enum EDIT)


;; viewer preferences definitions
(define-enum HPDF_HIDE_TOOLBAR)
(define-enum HPDF_HIDE_MENUBAR)
(define-enum HPDF_HIDE_WINDOW_UI)
(define-enum HPDF_FIT_WINDOW)
(define-enum HPDF_CENTER_WINDOW)

;; limitation of object implementation (PDF1.4)
(define-enum HPDF_LIMIT_MAX_INT)
(define-enum HPDF_LIMIT_MIN_INT)

(define-enum HPDF_LIMIT_MAX_REAL)
(define-enum HPDF_LIMIT_MIN_REAL)

(define-enum HPDF_LIMIT_MAX_STRING_LEN)
(define-enum HPDF_LIMIT_MAX_NAME_LEN)

(define-enum HPDF_LIMIT_MAX_ARRAY)
(define-enum HPDF_LIMIT_MAX_DICT_ELEMENT)
(define-enum HPDF_LIMIT_MAX_XREF_ELEMENT)
(define-enum HPDF_LIMIT_MAX_GSTATE)
(define-enum HPDF_LIMIT_MAX_DEVICE_N)
(define-enum HPDF_LIMIT_MAX_DEVICE_N_V15)
(define-enum HPDF_LIMIT_MAX_CID)
(define-enum HPDF_MAX_GENERATION_NUM)

(define-enum HPDF_MIN_PAGE_HEIGHT)
(define-enum HPDF_MIN_PAGE_WIDTH)
(define-enum HPDF_MAX_PAGE_HEIGHT)
(define-enum HPDF_MAX_PAGE_WIDTH)
(define-enum HPDF_MIN_MAGNIFICATION_FACTOR)
(define-enum HPDF_MAX_MAGNIFICATION_FACTOR)

;; limitation of various properties
(define-enum HPDF_MIN_PAGE_SIZE)
(define-enum HPDF_MAX_PAGE_SIZE)
(define-enum HPDF_MIN_HORIZONTALSCALING)
(define-enum HPDF_MAX_HORIZONTALSCALING)
(define-enum HPDF_MIN_WORDSPACE)
(define-enum HPDF_MAX_WORDSPACE)
(define-enum HPDF_MIN_CHARSPACE)
(define-enum HPDF_MAX_CHARSPACE)
(define-enum HPDF_MAX_FONTSIZE)
(define-enum HPDF_MAX_ZOOMSIZE)
(define-enum HPDF_MAX_LEADING)
(define-enum HPDF_MAX_LINEWIDTH)
(define-enum HPDF_MAX_DASH_PATTERN)

(define-enum HPDF_MAX_JWW_NUM)

;; country code definition
(define-constant HPDF_COUNTRY_AF (c "SCM_MAKE_STR(HPDF_COUNTRY_AF)")) ;;* AFGHANISTAN
(define-constant HPDF_COUNTRY_AL (c "SCM_MAKE_STR(HPDF_COUNTRY_AL)")) ;; ALBANIA
(define-constant HPDF_COUNTRY_DZ (c "SCM_MAKE_STR(HPDF_COUNTRY_DZ)")) ;; ALGERIA
(define-constant HPDF_COUNTRY_AS (c "SCM_MAKE_STR(HPDF_COUNTRY_AS)")) ;; AMERICAN SAMOA
(define-constant HPDF_COUNTRY_AD (c "SCM_MAKE_STR(HPDF_COUNTRY_AD)")) ;; ANDORRA
(define-constant HPDF_COUNTRY_AO (c "SCM_MAKE_STR(HPDF_COUNTRY_AO)")) ;; ANGOLA
(define-constant HPDF_COUNTRY_AI (c "SCM_MAKE_STR(HPDF_COUNTRY_AI)")) ;; ANGUILLA
(define-constant HPDF_COUNTRY_AQ (c "SCM_MAKE_STR(HPDF_COUNTRY_AQ)")) ;; ANTARCTICA
(define-constant HPDF_COUNTRY_AG (c "SCM_MAKE_STR(HPDF_COUNTRY_AG)")) ;; ANTIGUA AND BARBUDA
(define-constant HPDF_COUNTRY_AR (c "SCM_MAKE_STR(HPDF_COUNTRY_AR)")) ;; ARGENTINA
(define-constant HPDF_COUNTRY_AM (c "SCM_MAKE_STR(HPDF_COUNTRY_AM)")) ;; ARMENIA
(define-constant HPDF_COUNTRY_AW (c "SCM_MAKE_STR(HPDF_COUNTRY_AW)")) ;; ARUBA
(define-constant HPDF_COUNTRY_AU (c "SCM_MAKE_STR(HPDF_COUNTRY_AU)")) ;; AUSTRALIA
(define-constant HPDF_COUNTRY_AT (c "SCM_MAKE_STR(HPDF_COUNTRY_AT)")) ;; AUSTRIA
(define-constant HPDF_COUNTRY_AZ (c "SCM_MAKE_STR(HPDF_COUNTRY_AZ)")) ;; AZERBAIJAN
(define-constant HPDF_COUNTRY_BS (c "SCM_MAKE_STR(HPDF_COUNTRY_BS)")) ;; BAHAMAS
(define-constant HPDF_COUNTRY_BH (c "SCM_MAKE_STR(HPDF_COUNTRY_BH)")) ;; BAHRAIN
(define-constant HPDF_COUNTRY_BD (c "SCM_MAKE_STR(HPDF_COUNTRY_BD)")) ;; BANGLADESH
(define-constant HPDF_COUNTRY_BB (c "SCM_MAKE_STR(HPDF_COUNTRY_BB)")) ;; BARBADOS
(define-constant HPDF_COUNTRY_BY (c "SCM_MAKE_STR(HPDF_COUNTRY_BY)")) ;; BELARUS
(define-constant HPDF_COUNTRY_BE (c "SCM_MAKE_STR(HPDF_COUNTRY_BE)")) ;; BELGIUM
(define-constant HPDF_COUNTRY_BZ (c "SCM_MAKE_STR(HPDF_COUNTRY_BZ)")) ;; BELIZE
(define-constant HPDF_COUNTRY_BJ (c "SCM_MAKE_STR(HPDF_COUNTRY_BJ)")) ;; BENIN
(define-constant HPDF_COUNTRY_BM (c "SCM_MAKE_STR(HPDF_COUNTRY_BM)")) ;; BERMUDA
(define-constant HPDF_COUNTRY_BT (c "SCM_MAKE_STR(HPDF_COUNTRY_BT)")) ;; BHUTAN
(define-constant HPDF_COUNTRY_BO (c "SCM_MAKE_STR(HPDF_COUNTRY_BO)")) ;; BOLIVIA
(define-constant HPDF_COUNTRY_BA (c "SCM_MAKE_STR(HPDF_COUNTRY_BA)")) ;; BOSNIA AND HERZEGOWINA
(define-constant HPDF_COUNTRY_BW (c "SCM_MAKE_STR(HPDF_COUNTRY_BW)")) ;; BOTSWANA
(define-constant HPDF_COUNTRY_BV (c "SCM_MAKE_STR(HPDF_COUNTRY_BV)")) ;; BOUVET ISLAND
(define-constant HPDF_COUNTRY_BR (c "SCM_MAKE_STR(HPDF_COUNTRY_BR)")) ;; BRAZIL
(define-constant HPDF_COUNTRY_IO (c "SCM_MAKE_STR(HPDF_COUNTRY_IO)")) ;; BRITISH INDIAN OCEAN TERRITORY
(define-constant HPDF_COUNTRY_BN (c "SCM_MAKE_STR(HPDF_COUNTRY_BN)")) ;; BRUNEI DARUSSALAM
(define-constant HPDF_COUNTRY_BG (c "SCM_MAKE_STR(HPDF_COUNTRY_BG)")) ;; BULGARIA
(define-constant HPDF_COUNTRY_BF (c "SCM_MAKE_STR(HPDF_COUNTRY_BF)")) ;; BURKINA FASO
(define-constant HPDF_COUNTRY_BI (c "SCM_MAKE_STR(HPDF_COUNTRY_BI)")) ;; BURUNDI
(define-constant HPDF_COUNTRY_KH (c "SCM_MAKE_STR(HPDF_COUNTRY_KH)")) ;; CAMBODIA
(define-constant HPDF_COUNTRY_CM (c "SCM_MAKE_STR(HPDF_COUNTRY_CM)")) ;; CAMEROON
(define-constant HPDF_COUNTRY_CA (c "SCM_MAKE_STR(HPDF_COUNTRY_CA)")) ;; CANADA
(define-constant HPDF_COUNTRY_CV (c "SCM_MAKE_STR(HPDF_COUNTRY_CV)")) ;; CAPE VERDE
(define-constant HPDF_COUNTRY_KY (c "SCM_MAKE_STR(HPDF_COUNTRY_KY)")) ;; CAYMAN ISLANDS
(define-constant HPDF_COUNTRY_CF (c "SCM_MAKE_STR(HPDF_COUNTRY_CF)")) ;; CENTRAL AFRICAN REPUBLIC
(define-constant HPDF_COUNTRY_TD (c "SCM_MAKE_STR(HPDF_COUNTRY_TD)")) ;; CHAD
(define-constant HPDF_COUNTRY_CL (c "SCM_MAKE_STR(HPDF_COUNTRY_CL)")) ;; CHILE
(define-constant HPDF_COUNTRY_CN (c "SCM_MAKE_STR(HPDF_COUNTRY_CN)")) ;; CHINA
(define-constant HPDF_COUNTRY_CX (c "SCM_MAKE_STR(HPDF_COUNTRY_CX)")) ;; CHRISTMAS ISLAND
(define-constant HPDF_COUNTRY_CC (c "SCM_MAKE_STR(HPDF_COUNTRY_CC)")) ;; COCOS (KEELING) ISLANDS
(define-constant HPDF_COUNTRY_CO (c "SCM_MAKE_STR(HPDF_COUNTRY_CO)")) ;; COLOMBIA
(define-constant HPDF_COUNTRY_KM (c "SCM_MAKE_STR(HPDF_COUNTRY_KM)")) ;; COMOROS
(define-constant HPDF_COUNTRY_CG (c "SCM_MAKE_STR(HPDF_COUNTRY_CG)")) ;; CONGO
(define-constant HPDF_COUNTRY_CK (c "SCM_MAKE_STR(HPDF_COUNTRY_CK)")) ;; COOK ISLANDS
(define-constant HPDF_COUNTRY_CR (c "SCM_MAKE_STR(HPDF_COUNTRY_CR)")) ;; COSTA RICA
(define-constant HPDF_COUNTRY_CI (c "SCM_MAKE_STR(HPDF_COUNTRY_CI)")) ;; COTE D'IVOIRE
(define-constant HPDF_COUNTRY_HR (c "SCM_MAKE_STR(HPDF_COUNTRY_HR)")) ;; CROATIA (local name: Hrvatska)
(define-constant HPDF_COUNTRY_CU (c "SCM_MAKE_STR(HPDF_COUNTRY_CU)")) ;; CUBA
(define-constant HPDF_COUNTRY_CY (c "SCM_MAKE_STR(HPDF_COUNTRY_CY)")) ;; CYPRUS
(define-constant HPDF_COUNTRY_CZ (c "SCM_MAKE_STR(HPDF_COUNTRY_CZ)")) ;; CZECH REPUBLIC
(define-constant HPDF_COUNTRY_DK (c "SCM_MAKE_STR(HPDF_COUNTRY_DK)")) ;; DENMARK
(define-constant HPDF_COUNTRY_DJ (c "SCM_MAKE_STR(HPDF_COUNTRY_DJ)")) ;; DJIBOUTI
(define-constant HPDF_COUNTRY_DM (c "SCM_MAKE_STR(HPDF_COUNTRY_DM)")) ;; DOMINICA
(define-constant HPDF_COUNTRY_DO (c "SCM_MAKE_STR(HPDF_COUNTRY_DO)")) ;; DOMINICAN REPUBLIC
(define-constant HPDF_COUNTRY_TP (c "SCM_MAKE_STR(HPDF_COUNTRY_TP)")) ;; EAST TIMOR
(define-constant HPDF_COUNTRY_EC (c "SCM_MAKE_STR(HPDF_COUNTRY_EC)")) ;; ECUADOR
(define-constant HPDF_COUNTRY_EG (c "SCM_MAKE_STR(HPDF_COUNTRY_EG)")) ;; EGYPT
(define-constant HPDF_COUNTRY_SV (c "SCM_MAKE_STR(HPDF_COUNTRY_SV)")) ;; EL SALVADOR
(define-constant HPDF_COUNTRY_GQ (c "SCM_MAKE_STR(HPDF_COUNTRY_GQ)")) ;; EQUATORIAL GUINEA
(define-constant HPDF_COUNTRY_ER (c "SCM_MAKE_STR(HPDF_COUNTRY_ER)")) ;; ERITREA
(define-constant HPDF_COUNTRY_EE (c "SCM_MAKE_STR(HPDF_COUNTRY_EE)")) ;; ESTONIA
(define-constant HPDF_COUNTRY_ET (c "SCM_MAKE_STR(HPDF_COUNTRY_ET)")) ;; ETHIOPIA
(define-constant HPDF_COUNTRY_FK (c "SCM_MAKE_STR(HPDF_COUNTRY_FK)")) ;; FALKLAND ISLANDS (MALVINAS)
(define-constant HPDF_COUNTRY_FO (c "SCM_MAKE_STR(HPDF_COUNTRY_FO)")) ;; FAROE ISLANDS
(define-constant HPDF_COUNTRY_FJ (c "SCM_MAKE_STR(HPDF_COUNTRY_FJ)")) ;; FIJI
(define-constant HPDF_COUNTRY_FI (c "SCM_MAKE_STR(HPDF_COUNTRY_FI)")) ;; FINLAND
(define-constant HPDF_COUNTRY_FR (c "SCM_MAKE_STR(HPDF_COUNTRY_FR)")) ;; FRANCE
(define-constant HPDF_COUNTRY_FX (c "SCM_MAKE_STR(HPDF_COUNTRY_FX)")) ;; FRANCE, METROPOLITAN
(define-constant HPDF_COUNTRY_GF (c "SCM_MAKE_STR(HPDF_COUNTRY_GF)")) ;; FRENCH GUIANA
(define-constant HPDF_COUNTRY_PF (c "SCM_MAKE_STR(HPDF_COUNTRY_PF)")) ;; FRENCH POLYNESIA
(define-constant HPDF_COUNTRY_TF (c "SCM_MAKE_STR(HPDF_COUNTRY_TF)")) ;; FRENCH SOUTHERN TERRITORIES
(define-constant HPDF_COUNTRY_GA (c "SCM_MAKE_STR(HPDF_COUNTRY_GA)")) ;; GABON
(define-constant HPDF_COUNTRY_GM (c "SCM_MAKE_STR(HPDF_COUNTRY_GM)")) ;; GAMBIA
(define-constant HPDF_COUNTRY_GE (c "SCM_MAKE_STR(HPDF_COUNTRY_GE)")) ;; GEORGIA
(define-constant HPDF_COUNTRY_DE (c "SCM_MAKE_STR(HPDF_COUNTRY_DE)")) ;; GERMANY
(define-constant HPDF_COUNTRY_GH (c "SCM_MAKE_STR(HPDF_COUNTRY_GH)")) ;; GHANA
(define-constant HPDF_COUNTRY_GI (c "SCM_MAKE_STR(HPDF_COUNTRY_GI)")) ;; GIBRALTAR
(define-constant HPDF_COUNTRY_GR (c "SCM_MAKE_STR(HPDF_COUNTRY_GR)")) ;; GREECE
(define-constant HPDF_COUNTRY_GL (c "SCM_MAKE_STR(HPDF_COUNTRY_GL)")) ;; GREENLAND
(define-constant HPDF_COUNTRY_GD (c "SCM_MAKE_STR(HPDF_COUNTRY_GD)")) ;; GRENADA
(define-constant HPDF_COUNTRY_GP (c "SCM_MAKE_STR(HPDF_COUNTRY_GP)")) ;; GUADELOUPE
(define-constant HPDF_COUNTRY_GU (c "SCM_MAKE_STR(HPDF_COUNTRY_GU)")) ;; GUAM
(define-constant HPDF_COUNTRY_GT (c "SCM_MAKE_STR(HPDF_COUNTRY_GT)")) ;; GUATEMALA
(define-constant HPDF_COUNTRY_GN (c "SCM_MAKE_STR(HPDF_COUNTRY_GN)")) ;; GUINEA
(define-constant HPDF_COUNTRY_GW (c "SCM_MAKE_STR(HPDF_COUNTRY_GW)")) ;; GUINEA-BISSAU
(define-constant HPDF_COUNTRY_GY (c "SCM_MAKE_STR(HPDF_COUNTRY_GY)")) ;; GUYANA
(define-constant HPDF_COUNTRY_HT (c "SCM_MAKE_STR(HPDF_COUNTRY_HT)")) ;; HAITI
(define-constant HPDF_COUNTRY_HM (c "SCM_MAKE_STR(HPDF_COUNTRY_HM)")) ;; HEARD AND MC DONALD ISLANDS
(define-constant HPDF_COUNTRY_HN (c "SCM_MAKE_STR(HPDF_COUNTRY_HN)")) ;; HONDURAS
(define-constant HPDF_COUNTRY_HK (c "SCM_MAKE_STR(HPDF_COUNTRY_HK)")) ;; HONG KONG
(define-constant HPDF_COUNTRY_HU (c "SCM_MAKE_STR(HPDF_COUNTRY_HU)")) ;; HUNGARY
(define-constant HPDF_COUNTRY_IS (c "SCM_MAKE_STR(HPDF_COUNTRY_IS)")) ;; ICELAND
(define-constant HPDF_COUNTRY_IN (c "SCM_MAKE_STR(HPDF_COUNTRY_IN)")) ;; INDIA
(define-constant HPDF_COUNTRY_ID (c "SCM_MAKE_STR(HPDF_COUNTRY_ID)")) ;; INDONESIA
(define-constant HPDF_COUNTRY_IR (c "SCM_MAKE_STR(HPDF_COUNTRY_IR)")) ;; IRAN (ISLAMIC REPUBLIC OF)
(define-constant HPDF_COUNTRY_IQ (c "SCM_MAKE_STR(HPDF_COUNTRY_IQ)")) ;; IRAQ
(define-constant HPDF_COUNTRY_IE (c "SCM_MAKE_STR(HPDF_COUNTRY_IE)")) ;; IRELAND
(define-constant HPDF_COUNTRY_IL (c "SCM_MAKE_STR(HPDF_COUNTRY_IL)")) ;; ISRAEL
(define-constant HPDF_COUNTRY_IT (c "SCM_MAKE_STR(HPDF_COUNTRY_IT)")) ;; ITALY
(define-constant HPDF_COUNTRY_JM (c "SCM_MAKE_STR(HPDF_COUNTRY_JM)")) ;; JAMAICA
(define-constant HPDF_COUNTRY_JP (c "SCM_MAKE_STR(HPDF_COUNTRY_JP)")) ;; JAPAN
(define-constant HPDF_COUNTRY_JO (c "SCM_MAKE_STR(HPDF_COUNTRY_JO)")) ;; JORDAN
(define-constant HPDF_COUNTRY_KZ (c "SCM_MAKE_STR(HPDF_COUNTRY_KZ)")) ;; KAZAKHSTAN
(define-constant HPDF_COUNTRY_KE (c "SCM_MAKE_STR(HPDF_COUNTRY_KE)")) ;; KENYA
(define-constant HPDF_COUNTRY_KI (c "SCM_MAKE_STR(HPDF_COUNTRY_KI)")) ;; KIRIBATI
(define-constant HPDF_COUNTRY_KP (c "SCM_MAKE_STR(HPDF_COUNTRY_KP)")) ;; KOREA, DEMOCRATIC PEOPLE'S REPUBLIC OF
(define-constant HPDF_COUNTRY_KR (c "SCM_MAKE_STR(HPDF_COUNTRY_KR)")) ;; KOREA, REPUBLIC OF
(define-constant HPDF_COUNTRY_KW (c "SCM_MAKE_STR(HPDF_COUNTRY_KW)")) ;; KUWAIT
(define-constant HPDF_COUNTRY_KG (c "SCM_MAKE_STR(HPDF_COUNTRY_KG)")) ;; KYRGYZSTAN
(define-constant HPDF_COUNTRY_LA (c "SCM_MAKE_STR(HPDF_COUNTRY_LA)")) ;; LAO PEOPLE'S DEMOCRATIC REPUBLIC
(define-constant HPDF_COUNTRY_LV (c "SCM_MAKE_STR(HPDF_COUNTRY_LV)")) ;; LATVIA
(define-constant HPDF_COUNTRY_LB (c "SCM_MAKE_STR(HPDF_COUNTRY_LB)")) ;; LEBANON
(define-constant HPDF_COUNTRY_LS (c "SCM_MAKE_STR(HPDF_COUNTRY_LS)")) ;; LESOTHO
(define-constant HPDF_COUNTRY_LR (c "SCM_MAKE_STR(HPDF_COUNTRY_LR)")) ;; LIBERIA
(define-constant HPDF_COUNTRY_LY (c "SCM_MAKE_STR(HPDF_COUNTRY_LY)")) ;; LIBYAN ARAB JAMAHIRIYA
(define-constant HPDF_COUNTRY_LI (c "SCM_MAKE_STR(HPDF_COUNTRY_LI)")) ;; LIECHTENSTEIN
(define-constant HPDF_COUNTRY_LT (c "SCM_MAKE_STR(HPDF_COUNTRY_LT)")) ;; LITHUANIA
(define-constant HPDF_COUNTRY_LU (c "SCM_MAKE_STR(HPDF_COUNTRY_LU)")) ;; LUXEMBOURG
(define-constant HPDF_COUNTRY_MO (c "SCM_MAKE_STR(HPDF_COUNTRY_MO)")) ;; MACAU
(define-constant HPDF_COUNTRY_MK (c "SCM_MAKE_STR(HPDF_COUNTRY_MK)")) ;; MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF
(define-constant HPDF_COUNTRY_MG (c "SCM_MAKE_STR(HPDF_COUNTRY_MG)")) ;; MADAGASCAR
(define-constant HPDF_COUNTRY_MW (c "SCM_MAKE_STR(HPDF_COUNTRY_MW)")) ;; MALAWI
(define-constant HPDF_COUNTRY_MY (c "SCM_MAKE_STR(HPDF_COUNTRY_MY)")) ;; MALAYSIA
(define-constant HPDF_COUNTRY_MV (c "SCM_MAKE_STR(HPDF_COUNTRY_MV)")) ;; MALDIVES
(define-constant HPDF_COUNTRY_ML (c "SCM_MAKE_STR(HPDF_COUNTRY_ML)")) ;; MALI
(define-constant HPDF_COUNTRY_MT (c "SCM_MAKE_STR(HPDF_COUNTRY_MT)")) ;; MALTA
(define-constant HPDF_COUNTRY_MH (c "SCM_MAKE_STR(HPDF_COUNTRY_MH)")) ;; MARSHALL ISLANDS
(define-constant HPDF_COUNTRY_MQ (c "SCM_MAKE_STR(HPDF_COUNTRY_MQ)")) ;; MARTINIQUE
(define-constant HPDF_COUNTRY_MR (c "SCM_MAKE_STR(HPDF_COUNTRY_MR)")) ;; MAURITANIA
(define-constant HPDF_COUNTRY_MU (c "SCM_MAKE_STR(HPDF_COUNTRY_MU)")) ;; MAURITIUS
(define-constant HPDF_COUNTRY_YT (c "SCM_MAKE_STR(HPDF_COUNTRY_YT)")) ;; MAYOTTE
(define-constant HPDF_COUNTRY_MX (c "SCM_MAKE_STR(HPDF_COUNTRY_MX)")) ;; MEXICO
(define-constant HPDF_COUNTRY_FM (c "SCM_MAKE_STR(HPDF_COUNTRY_FM)")) ;; MICRONESIA, FEDERATED STATES OF
(define-constant HPDF_COUNTRY_MD (c "SCM_MAKE_STR(HPDF_COUNTRY_MD)")) ;; MOLDOVA, REPUBLIC OF
(define-constant HPDF_COUNTRY_MC (c "SCM_MAKE_STR(HPDF_COUNTRY_MC)")) ;; MONACO
(define-constant HPDF_COUNTRY_MN (c "SCM_MAKE_STR(HPDF_COUNTRY_MN)")) ;; MONGOLIA
(define-constant HPDF_COUNTRY_MS (c "SCM_MAKE_STR(HPDF_COUNTRY_MS)")) ;; MONTSERRAT
(define-constant HPDF_COUNTRY_MA (c "SCM_MAKE_STR(HPDF_COUNTRY_MA)")) ;; MOROCCO
(define-constant HPDF_COUNTRY_MZ (c "SCM_MAKE_STR(HPDF_COUNTRY_MZ)")) ;; MOZAMBIQUE
(define-constant HPDF_COUNTRY_MM (c "SCM_MAKE_STR(HPDF_COUNTRY_MM)")) ;; MYANMAR
(define-constant HPDF_COUNTRY_NA (c "SCM_MAKE_STR(HPDF_COUNTRY_NA)")) ;; NAMIBIA
(define-constant HPDF_COUNTRY_NR (c "SCM_MAKE_STR(HPDF_COUNTRY_NR)")) ;; NAURU
(define-constant HPDF_COUNTRY_NP (c "SCM_MAKE_STR(HPDF_COUNTRY_NP)")) ;; NEPAL
(define-constant HPDF_COUNTRY_NL (c "SCM_MAKE_STR(HPDF_COUNTRY_NL)")) ;; NETHERLANDS
(define-constant HPDF_COUNTRY_AN (c "SCM_MAKE_STR(HPDF_COUNTRY_AN)")) ;; NETHERLANDS ANTILLES
(define-constant HPDF_COUNTRY_NC (c "SCM_MAKE_STR(HPDF_COUNTRY_NC)")) ;; NEW CALEDONIA
(define-constant HPDF_COUNTRY_NZ (c "SCM_MAKE_STR(HPDF_COUNTRY_NZ)")) ;; NEW ZEALAND
(define-constant HPDF_COUNTRY_NI (c "SCM_MAKE_STR(HPDF_COUNTRY_NI)")) ;; NICARAGUA
(define-constant HPDF_COUNTRY_NE (c "SCM_MAKE_STR(HPDF_COUNTRY_NE)")) ;; NIGER
(define-constant HPDF_COUNTRY_NG (c "SCM_MAKE_STR(HPDF_COUNTRY_NG)")) ;; NIGERIA
(define-constant HPDF_COUNTRY_NU (c "SCM_MAKE_STR(HPDF_COUNTRY_NU)")) ;; NIUE
(define-constant HPDF_COUNTRY_NF (c "SCM_MAKE_STR(HPDF_COUNTRY_NF)")) ;; NORFOLK ISLAND
(define-constant HPDF_COUNTRY_MP (c "SCM_MAKE_STR(HPDF_COUNTRY_MP)")) ;; NORTHERN MARIANA ISLANDS
(define-constant HPDF_COUNTRY_NO (c "SCM_MAKE_STR(HPDF_COUNTRY_NO)")) ;; NORWAY
(define-constant HPDF_COUNTRY_OM (c "SCM_MAKE_STR(HPDF_COUNTRY_OM)")) ;; OMAN
(define-constant HPDF_COUNTRY_PK (c "SCM_MAKE_STR(HPDF_COUNTRY_PK)")) ;; PAKISTAN
(define-constant HPDF_COUNTRY_PW (c "SCM_MAKE_STR(HPDF_COUNTRY_PW)")) ;; PALAU
(define-constant HPDF_COUNTRY_PA (c "SCM_MAKE_STR(HPDF_COUNTRY_PA)")) ;; PANAMA
(define-constant HPDF_COUNTRY_PG (c "SCM_MAKE_STR(HPDF_COUNTRY_PG)")) ;; PAPUA NEW GUINEA
(define-constant HPDF_COUNTRY_PY (c "SCM_MAKE_STR(HPDF_COUNTRY_PY)")) ;; PARAGUAY
(define-constant HPDF_COUNTRY_PE (c "SCM_MAKE_STR(HPDF_COUNTRY_PE)")) ;; PERU
(define-constant HPDF_COUNTRY_PH (c "SCM_MAKE_STR(HPDF_COUNTRY_PH)")) ;; PHILIPPINES
(define-constant HPDF_COUNTRY_PN (c "SCM_MAKE_STR(HPDF_COUNTRY_PN)")) ;; PITCAIRN
(define-constant HPDF_COUNTRY_PL (c "SCM_MAKE_STR(HPDF_COUNTRY_PL)")) ;; POLAND
(define-constant HPDF_COUNTRY_PT (c "SCM_MAKE_STR(HPDF_COUNTRY_PT)")) ;; PORTUGAL
(define-constant HPDF_COUNTRY_PR (c "SCM_MAKE_STR(HPDF_COUNTRY_PR)")) ;; PUERTO RICO
(define-constant HPDF_COUNTRY_QA (c "SCM_MAKE_STR(HPDF_COUNTRY_QA)")) ;; QATAR
(define-constant HPDF_COUNTRY_RE (c "SCM_MAKE_STR(HPDF_COUNTRY_RE)")) ;; REUNION
(define-constant HPDF_COUNTRY_RO (c "SCM_MAKE_STR(HPDF_COUNTRY_RO)")) ;; ROMANIA
(define-constant HPDF_COUNTRY_RU (c "SCM_MAKE_STR(HPDF_COUNTRY_RU)")) ;; RUSSIAN FEDERATION
(define-constant HPDF_COUNTRY_RW (c "SCM_MAKE_STR(HPDF_COUNTRY_RW)")) ;; RWANDA
(define-constant HPDF_COUNTRY_KN (c "SCM_MAKE_STR(HPDF_COUNTRY_KN)")) ;; SAINT KITTS AND NEVIS
(define-constant HPDF_COUNTRY_LC (c "SCM_MAKE_STR(HPDF_COUNTRY_LC)")) ;; SAINT LUCIA
(define-constant HPDF_COUNTRY_VC (c "SCM_MAKE_STR(HPDF_COUNTRY_VC)")) ;; SAINT VINCENT AND THE GRENADINES
(define-constant HPDF_COUNTRY_WS (c "SCM_MAKE_STR(HPDF_COUNTRY_WS)")) ;; SAMOA
(define-constant HPDF_COUNTRY_SM (c "SCM_MAKE_STR(HPDF_COUNTRY_SM)")) ;; SAN MARINO
(define-constant HPDF_COUNTRY_ST (c "SCM_MAKE_STR(HPDF_COUNTRY_ST)")) ;; SAO TOME AND PRINCIPE
(define-constant HPDF_COUNTRY_SA (c "SCM_MAKE_STR(HPDF_COUNTRY_SA)")) ;; SAUDI ARABIA
(define-constant HPDF_COUNTRY_SN (c "SCM_MAKE_STR(HPDF_COUNTRY_SN)")) ;; SENEGAL
(define-constant HPDF_COUNTRY_SC (c "SCM_MAKE_STR(HPDF_COUNTRY_SC)")) ;; SEYCHELLES
(define-constant HPDF_COUNTRY_SL (c "SCM_MAKE_STR(HPDF_COUNTRY_SL)")) ;; SIERRA LEONE
(define-constant HPDF_COUNTRY_SG (c "SCM_MAKE_STR(HPDF_COUNTRY_SG)")) ;; SINGAPORE
(define-constant HPDF_COUNTRY_SK (c "SCM_MAKE_STR(HPDF_COUNTRY_SK)")) ;; SLOVAKIA (Slovak Republic)
(define-constant HPDF_COUNTRY_SI (c "SCM_MAKE_STR(HPDF_COUNTRY_SI)")) ;; SLOVENIA
(define-constant HPDF_COUNTRY_SB (c "SCM_MAKE_STR(HPDF_COUNTRY_SB)")) ;; SOLOMON ISLANDS
(define-constant HPDF_COUNTRY_SO (c "SCM_MAKE_STR(HPDF_COUNTRY_SO)")) ;; SOMALIA
(define-constant HPDF_COUNTRY_ZA (c "SCM_MAKE_STR(HPDF_COUNTRY_ZA)")) ;; SOUTH AFRICA
(define-constant HPDF_COUNTRY_ES (c "SCM_MAKE_STR(HPDF_COUNTRY_ES)")) ;; SPAIN
(define-constant HPDF_COUNTRY_LK (c "SCM_MAKE_STR(HPDF_COUNTRY_LK)")) ;; SRI LANKA
(define-constant HPDF_COUNTRY_SH (c "SCM_MAKE_STR(HPDF_COUNTRY_SH)")) ;; ST. HELENA
(define-constant HPDF_COUNTRY_PM (c "SCM_MAKE_STR(HPDF_COUNTRY_PM)")) ;; ST. PIERRE AND MIQUELON
(define-constant HPDF_COUNTRY_SD (c "SCM_MAKE_STR(HPDF_COUNTRY_SD)")) ;; SUDAN
(define-constant HPDF_COUNTRY_SR (c "SCM_MAKE_STR(HPDF_COUNTRY_SR)")) ;; SURINAME
(define-constant HPDF_COUNTRY_SJ (c "SCM_MAKE_STR(HPDF_COUNTRY_SJ)")) ;; SVALBARD AND JAN MAYEN ISLANDS
(define-constant HPDF_COUNTRY_SZ (c "SCM_MAKE_STR(HPDF_COUNTRY_SZ)")) ;; SWAZILAND
(define-constant HPDF_COUNTRY_SE (c "SCM_MAKE_STR(HPDF_COUNTRY_SE)")) ;; SWEDEN
(define-constant HPDF_COUNTRY_CH (c "SCM_MAKE_STR(HPDF_COUNTRY_CH)")) ;; SWITZERLAND
(define-constant HPDF_COUNTRY_SY (c "SCM_MAKE_STR(HPDF_COUNTRY_SY)")) ;; SYRIAN ARAB REPUBLIC
(define-constant HPDF_COUNTRY_TW (c "SCM_MAKE_STR(HPDF_COUNTRY_TW)")) ;; TAIWAN, PROVINCE OF CHINA
(define-constant HPDF_COUNTRY_TJ (c "SCM_MAKE_STR(HPDF_COUNTRY_TJ)")) ;; TAJIKISTAN
(define-constant HPDF_COUNTRY_TZ (c "SCM_MAKE_STR(HPDF_COUNTRY_TZ)")) ;; TANZANIA, UNITED REPUBLIC OF
(define-constant HPDF_COUNTRY_TH (c "SCM_MAKE_STR(HPDF_COUNTRY_TH)")) ;; THAILAND
(define-constant HPDF_COUNTRY_TG (c "SCM_MAKE_STR(HPDF_COUNTRY_TG)")) ;; TOGO
(define-constant HPDF_COUNTRY_TK (c "SCM_MAKE_STR(HPDF_COUNTRY_TK)")) ;; TOKELAU
(define-constant HPDF_COUNTRY_TO (c "SCM_MAKE_STR(HPDF_COUNTRY_TO)")) ;; TONGA
(define-constant HPDF_COUNTRY_TT (c "SCM_MAKE_STR(HPDF_COUNTRY_TT)")) ;; TRINIDAD AND TOBAGO
(define-constant HPDF_COUNTRY_TN (c "SCM_MAKE_STR(HPDF_COUNTRY_TN)")) ;; TUNISIA
(define-constant HPDF_COUNTRY_TR (c "SCM_MAKE_STR(HPDF_COUNTRY_TR)")) ;; TURKEY
(define-constant HPDF_COUNTRY_TM (c "SCM_MAKE_STR(HPDF_COUNTRY_TM)")) ;; TURKMENISTAN
(define-constant HPDF_COUNTRY_TC (c "SCM_MAKE_STR(HPDF_COUNTRY_TC)")) ;; TURKS AND CAICOS ISLANDS
(define-constant HPDF_COUNTRY_TV (c "SCM_MAKE_STR(HPDF_COUNTRY_TV)")) ;; TUVALU
(define-constant HPDF_COUNTRY_UG (c "SCM_MAKE_STR(HPDF_COUNTRY_UG)")) ;; UGANDA
(define-constant HPDF_COUNTRY_UA (c "SCM_MAKE_STR(HPDF_COUNTRY_UA)")) ;; UKRAINE
(define-constant HPDF_COUNTRY_AE (c "SCM_MAKE_STR(HPDF_COUNTRY_AE)")) ;; UNITED ARAB EMIRATES
(define-constant HPDF_COUNTRY_GB (c "SCM_MAKE_STR(HPDF_COUNTRY_GB)")) ;; UNITED KINGDOM
(define-constant HPDF_COUNTRY_US (c "SCM_MAKE_STR(HPDF_COUNTRY_US)")) ;; UNITED STATES
(define-constant HPDF_COUNTRY_UM (c "SCM_MAKE_STR(HPDF_COUNTRY_UM)")) ;; UNITED STATES MINOR OUTLYING ISLANDS
(define-constant HPDF_COUNTRY_UY (c "SCM_MAKE_STR(HPDF_COUNTRY_UY)")) ;; URUGUAY
(define-constant HPDF_COUNTRY_UZ (c "SCM_MAKE_STR(HPDF_COUNTRY_UZ)")) ;; UZBEKISTAN
(define-constant HPDF_COUNTRY_VU (c "SCM_MAKE_STR(HPDF_COUNTRY_VU)")) ;; VANUATU
(define-constant HPDF_COUNTRY_VA (c "SCM_MAKE_STR(HPDF_COUNTRY_VA)")) ;; VATICAN CITY STATE (HOLY SEE)
(define-constant HPDF_COUNTRY_VE (c "SCM_MAKE_STR(HPDF_COUNTRY_VE)")) ;; VENEZUELA
(define-constant HPDF_COUNTRY_VN (c "SCM_MAKE_STR(HPDF_COUNTRY_VN)")) ;; VIET NAM
(define-constant HPDF_COUNTRY_VG (c "SCM_MAKE_STR(HPDF_COUNTRY_VG)")) ;; VIRGIN ISLANDS (BRITISH)
(define-constant HPDF_COUNTRY_VI (c "SCM_MAKE_STR(HPDF_COUNTRY_VI)")) ;; VIRGIN ISLANDS (U.S.)
(define-constant HPDF_COUNTRY_WF (c "SCM_MAKE_STR(HPDF_COUNTRY_WF)")) ;; WALLIS AND FUTUNA ISLANDS
(define-constant HPDF_COUNTRY_EH (c "SCM_MAKE_STR(HPDF_COUNTRY_EH)")) ;; WESTERN SAHARA
(define-constant HPDF_COUNTRY_YE (c "SCM_MAKE_STR(HPDF_COUNTRY_YE)")) ;; YEMEN
(define-constant HPDF_COUNTRY_YU (c "SCM_MAKE_STR(HPDF_COUNTRY_YU)")) ;; YUGOSLAVIA
(define-constant HPDF_COUNTRY_ZR (c "SCM_MAKE_STR(HPDF_COUNTRY_ZR)")) ;; ZAIRE
(define-constant HPDF_COUNTRY_ZM (c "SCM_MAKE_STR(HPDF_COUNTRY_ZM)")) ;; ZAMBIA
(define-constant HPDF_COUNTRY_ZW (c "SCM_MAKE_STR(HPDF_COUNTRY_ZW)")) ;; ZIMBABWE

;; lang code definition
(define-constant HPDF_LANG_AA (c "SCM_MAKE_STR(HPDF_LANG_AA)")) ;; Afar 
(define-constant HPDF_LANG_AB (c "SCM_MAKE_STR(HPDF_LANG_AB)")) ;; Abkhazian 
(define-constant HPDF_LANG_AF (c "SCM_MAKE_STR(HPDF_LANG_AF)")) ;; Afrikaans 
(define-constant HPDF_LANG_AM (c "SCM_MAKE_STR(HPDF_LANG_AM)")) ;; Amharic 
(define-constant HPDF_LANG_AR (c "SCM_MAKE_STR(HPDF_LANG_AR)")) ;; Arabic 
(define-constant HPDF_LANG_AS (c "SCM_MAKE_STR(HPDF_LANG_AS)")) ;; Assamese 
(define-constant HPDF_LANG_AY (c "SCM_MAKE_STR(HPDF_LANG_AY)")) ;; Aymara 
(define-constant HPDF_LANG_AZ (c "SCM_MAKE_STR(HPDF_LANG_AZ)")) ;; Azerbaijani 
(define-constant HPDF_LANG_BA (c "SCM_MAKE_STR(HPDF_LANG_BA)")) ;; Bashkir 
(define-constant HPDF_LANG_BE (c "SCM_MAKE_STR(HPDF_LANG_BE)")) ;; Byelorussian 
(define-constant HPDF_LANG_BG (c "SCM_MAKE_STR(HPDF_LANG_BG)")) ;; Bulgarian 
(define-constant HPDF_LANG_BH (c "SCM_MAKE_STR(HPDF_LANG_BH)")) ;; Bihari 
(define-constant HPDF_LANG_BI (c "SCM_MAKE_STR(HPDF_LANG_BI)")) ;; Bislama 
(define-constant HPDF_LANG_BN (c "SCM_MAKE_STR(HPDF_LANG_BN)")) ;; Bengali Bangla 
(define-constant HPDF_LANG_BO (c "SCM_MAKE_STR(HPDF_LANG_BO)")) ;; Tibetan 
(define-constant HPDF_LANG_BR (c "SCM_MAKE_STR(HPDF_LANG_BR)")) ;; Breton 
(define-constant HPDF_LANG_CA (c "SCM_MAKE_STR(HPDF_LANG_CA)")) ;; Catalan 
(define-constant HPDF_LANG_CO (c "SCM_MAKE_STR(HPDF_LANG_CO)")) ;; Corsican 
(define-constant HPDF_LANG_CS (c "SCM_MAKE_STR(HPDF_LANG_CS)")) ;; Czech 
(define-constant HPDF_LANG_CY (c "SCM_MAKE_STR(HPDF_LANG_CY)")) ;; Welsh 
(define-constant HPDF_LANG_DA (c "SCM_MAKE_STR(HPDF_LANG_DA)")) ;; Danish 
(define-constant HPDF_LANG_DE (c "SCM_MAKE_STR(HPDF_LANG_DE)")) ;; German 
(define-constant HPDF_LANG_DZ (c "SCM_MAKE_STR(HPDF_LANG_DZ)")) ;; Bhutani 
(define-constant HPDF_LANG_EL (c "SCM_MAKE_STR(HPDF_LANG_EL)")) ;; Greek 
(define-constant HPDF_LANG_EN (c "SCM_MAKE_STR(HPDF_LANG_EN)")) ;; English 
(define-constant HPDF_LANG_EO (c "SCM_MAKE_STR(HPDF_LANG_EO)")) ;; Esperanto 
(define-constant HPDF_LANG_ES (c "SCM_MAKE_STR(HPDF_LANG_ES)")) ;; Spanish 
(define-constant HPDF_LANG_ET (c "SCM_MAKE_STR(HPDF_LANG_ET)")) ;; Estonian 
(define-constant HPDF_LANG_EU (c "SCM_MAKE_STR(HPDF_LANG_EU)")) ;; Basque 
(define-constant HPDF_LANG_FA (c "SCM_MAKE_STR(HPDF_LANG_FA)")) ;; Persian 
(define-constant HPDF_LANG_FI (c "SCM_MAKE_STR(HPDF_LANG_FI)")) ;; Finnish 
(define-constant HPDF_LANG_FJ (c "SCM_MAKE_STR(HPDF_LANG_FJ)")) ;; Fiji 
(define-constant HPDF_LANG_FO (c "SCM_MAKE_STR(HPDF_LANG_FO)")) ;; Faeroese 
(define-constant HPDF_LANG_FR (c "SCM_MAKE_STR(HPDF_LANG_FR)")) ;; French 
(define-constant HPDF_LANG_FY (c "SCM_MAKE_STR(HPDF_LANG_FY)")) ;; Frisian 
(define-constant HPDF_LANG_GA (c "SCM_MAKE_STR(HPDF_LANG_GA)")) ;; Irish 
(define-constant HPDF_LANG_GD (c "SCM_MAKE_STR(HPDF_LANG_GD)")) ;; Scots Gaelic 
(define-constant HPDF_LANG_GL (c "SCM_MAKE_STR(HPDF_LANG_GL)")) ;; Galician 
(define-constant HPDF_LANG_GN (c "SCM_MAKE_STR(HPDF_LANG_GN)")) ;; Guarani 
(define-constant HPDF_LANG_GU (c "SCM_MAKE_STR(HPDF_LANG_GU)")) ;; Gujarati 
(define-constant HPDF_LANG_HA (c "SCM_MAKE_STR(HPDF_LANG_HA)")) ;; Hausa 
(define-constant HPDF_LANG_HI (c "SCM_MAKE_STR(HPDF_LANG_HI)")) ;; Hindi 
(define-constant HPDF_LANG_HR (c "SCM_MAKE_STR(HPDF_LANG_HR)")) ;; Croatian 
(define-constant HPDF_LANG_HU (c "SCM_MAKE_STR(HPDF_LANG_HU)")) ;; Hungarian 
(define-constant HPDF_LANG_HY (c "SCM_MAKE_STR(HPDF_LANG_HY)")) ;; Armenian 
(define-constant HPDF_LANG_IA (c "SCM_MAKE_STR(HPDF_LANG_IA)")) ;; Interlingua 
(define-constant HPDF_LANG_IE (c "SCM_MAKE_STR(HPDF_LANG_IE)")) ;; Interlingue 
(define-constant HPDF_LANG_IK (c "SCM_MAKE_STR(HPDF_LANG_IK)")) ;; Inupiak 
(define-constant HPDF_LANG_IN (c "SCM_MAKE_STR(HPDF_LANG_IN)")) ;; Indonesian 
(define-constant HPDF_LANG_IS (c "SCM_MAKE_STR(HPDF_LANG_IS)")) ;; Icelandic 
(define-constant HPDF_LANG_IT (c "SCM_MAKE_STR(HPDF_LANG_IT)")) ;; Italian 
(define-constant HPDF_LANG_IW (c "SCM_MAKE_STR(HPDF_LANG_IW)")) ;; Hebrew 
(define-constant HPDF_LANG_JA (c "SCM_MAKE_STR(HPDF_LANG_JA)")) ;; Japanese 
(define-constant HPDF_LANG_JI (c "SCM_MAKE_STR(HPDF_LANG_JI)")) ;; Yiddish 
(define-constant HPDF_LANG_JW (c "SCM_MAKE_STR(HPDF_LANG_JW)")) ;; Javanese 
(define-constant HPDF_LANG_KA (c "SCM_MAKE_STR(HPDF_LANG_KA)")) ;; Georgian 
(define-constant HPDF_LANG_KK (c "SCM_MAKE_STR(HPDF_LANG_KK)")) ;; Kazakh 
(define-constant HPDF_LANG_KL (c "SCM_MAKE_STR(HPDF_LANG_KL)")) ;; Greenlandic 
(define-constant HPDF_LANG_KM (c "SCM_MAKE_STR(HPDF_LANG_KM)")) ;; Cambodian 
(define-constant HPDF_LANG_KN (c "SCM_MAKE_STR(HPDF_LANG_KN)")) ;; Kannada 
(define-constant HPDF_LANG_KO (c "SCM_MAKE_STR(HPDF_LANG_KO)")) ;; Korean 
(define-constant HPDF_LANG_KS (c "SCM_MAKE_STR(HPDF_LANG_KS)")) ;; Kashmiri 
(define-constant HPDF_LANG_KU (c "SCM_MAKE_STR(HPDF_LANG_KU)")) ;; Kurdish 
(define-constant HPDF_LANG_KY (c "SCM_MAKE_STR(HPDF_LANG_KY)")) ;; Kirghiz 
(define-constant HPDF_LANG_LA (c "SCM_MAKE_STR(HPDF_LANG_LA)")) ;; Latin 
(define-constant HPDF_LANG_LN (c "SCM_MAKE_STR(HPDF_LANG_LN)")) ;; Lingala 
(define-constant HPDF_LANG_LO (c "SCM_MAKE_STR(HPDF_LANG_LO)")) ;; Laothian 
(define-constant HPDF_LANG_LT (c "SCM_MAKE_STR(HPDF_LANG_LT)")) ;; Lithuanian 
(define-constant HPDF_LANG_LV (c "SCM_MAKE_STR(HPDF_LANG_LV)")) ;; Latvian,Lettish 
(define-constant HPDF_LANG_MG (c "SCM_MAKE_STR(HPDF_LANG_MG)")) ;; Malagasy 
(define-constant HPDF_LANG_MI (c "SCM_MAKE_STR(HPDF_LANG_MI)")) ;; Maori 
(define-constant HPDF_LANG_MK (c "SCM_MAKE_STR(HPDF_LANG_MK)")) ;; Macedonian 
(define-constant HPDF_LANG_ML (c "SCM_MAKE_STR(HPDF_LANG_ML)")) ;; Malayalam 
(define-constant HPDF_LANG_MN (c "SCM_MAKE_STR(HPDF_LANG_MN)")) ;; Mongolian 
(define-constant HPDF_LANG_MO (c "SCM_MAKE_STR(HPDF_LANG_MO)")) ;; Moldavian 
(define-constant HPDF_LANG_MR (c "SCM_MAKE_STR(HPDF_LANG_MR)")) ;; Marathi 
(define-constant HPDF_LANG_MS (c "SCM_MAKE_STR(HPDF_LANG_MS)")) ;; Malay 
(define-constant HPDF_LANG_MT (c "SCM_MAKE_STR(HPDF_LANG_MT)")) ;; Maltese 
(define-constant HPDF_LANG_MY (c "SCM_MAKE_STR(HPDF_LANG_MY)")) ;; Burmese 
(define-constant HPDF_LANG_NA (c "SCM_MAKE_STR(HPDF_LANG_NA)")) ;; Nauru 
(define-constant HPDF_LANG_NE (c "SCM_MAKE_STR(HPDF_LANG_NE)")) ;; Nepali 
(define-constant HPDF_LANG_NL (c "SCM_MAKE_STR(HPDF_LANG_NL)")) ;; Dutch 
(define-constant HPDF_LANG_NO (c "SCM_MAKE_STR(HPDF_LANG_NO)")) ;; Norwegian 
(define-constant HPDF_LANG_OC (c "SCM_MAKE_STR(HPDF_LANG_OC)")) ;; Occitan 
(define-constant HPDF_LANG_OM (c "SCM_MAKE_STR(HPDF_LANG_OM)")) ;; (Afan)Oromo 
(define-constant HPDF_LANG_OR (c "SCM_MAKE_STR(HPDF_LANG_OR)")) ;; Oriya 
(define-constant HPDF_LANG_PA (c "SCM_MAKE_STR(HPDF_LANG_PA)")) ;; Punjabi 
(define-constant HPDF_LANG_PL (c "SCM_MAKE_STR(HPDF_LANG_PL)")) ;; Polish 
(define-constant HPDF_LANG_PS (c "SCM_MAKE_STR(HPDF_LANG_PS)")) ;; Pashto,Pushto 
(define-constant HPDF_LANG_PT (c "SCM_MAKE_STR(HPDF_LANG_PT)")) ;; Portuguese  
(define-constant HPDF_LANG_QU (c "SCM_MAKE_STR(HPDF_LANG_QU)")) ;; Quechua 
(define-constant HPDF_LANG_RM (c "SCM_MAKE_STR(HPDF_LANG_RM)")) ;; Rhaeto-Romance 
(define-constant HPDF_LANG_RN (c "SCM_MAKE_STR(HPDF_LANG_RN)")) ;; Kirundi 
(define-constant HPDF_LANG_RO (c "SCM_MAKE_STR(HPDF_LANG_RO)")) ;; Romanian 
(define-constant HPDF_LANG_RU (c "SCM_MAKE_STR(HPDF_LANG_RU)")) ;; Russian 
(define-constant HPDF_LANG_RW (c "SCM_MAKE_STR(HPDF_LANG_RW)")) ;; Kinyarwanda 
(define-constant HPDF_LANG_SA (c "SCM_MAKE_STR(HPDF_LANG_SA)")) ;; Sanskrit 
(define-constant HPDF_LANG_SD (c "SCM_MAKE_STR(HPDF_LANG_SD)")) ;; Sindhi 
(define-constant HPDF_LANG_SG (c "SCM_MAKE_STR(HPDF_LANG_SG)")) ;; Sangro 
(define-constant HPDF_LANG_SH (c "SCM_MAKE_STR(HPDF_LANG_SH)")) ;; Serbo-Croatian 
(define-constant HPDF_LANG_SI (c "SCM_MAKE_STR(HPDF_LANG_SI)")) ;; Singhalese 
(define-constant HPDF_LANG_SK (c "SCM_MAKE_STR(HPDF_LANG_SK)")) ;; Slovak 
(define-constant HPDF_LANG_SL (c "SCM_MAKE_STR(HPDF_LANG_SL)")) ;; Slovenian 
(define-constant HPDF_LANG_SM (c "SCM_MAKE_STR(HPDF_LANG_SM)")) ;; Samoan 
(define-constant HPDF_LANG_SN (c "SCM_MAKE_STR(HPDF_LANG_SN)")) ;; Shona 
(define-constant HPDF_LANG_SO (c "SCM_MAKE_STR(HPDF_LANG_SO)")) ;; Somali 
(define-constant HPDF_LANG_SQ (c "SCM_MAKE_STR(HPDF_LANG_SQ)")) ;; Albanian 
(define-constant HPDF_LANG_SR (c "SCM_MAKE_STR(HPDF_LANG_SR)")) ;; Serbian 
(define-constant HPDF_LANG_SS (c "SCM_MAKE_STR(HPDF_LANG_SS)")) ;; Siswati 
(define-constant HPDF_LANG_ST (c "SCM_MAKE_STR(HPDF_LANG_ST)")) ;; Sesotho 
(define-constant HPDF_LANG_SU (c "SCM_MAKE_STR(HPDF_LANG_SU)")) ;; Sundanese 
(define-constant HPDF_LANG_SV (c "SCM_MAKE_STR(HPDF_LANG_SV)")) ;; Swedish 
(define-constant HPDF_LANG_SW (c "SCM_MAKE_STR(HPDF_LANG_SW)")) ;; Swahili 
(define-constant HPDF_LANG_TA (c "SCM_MAKE_STR(HPDF_LANG_TA)")) ;; Tamil 
(define-constant HPDF_LANG_TE (c "SCM_MAKE_STR(HPDF_LANG_TE)")) ;; Tegulu 
(define-constant HPDF_LANG_TG (c "SCM_MAKE_STR(HPDF_LANG_TG)")) ;; Tajik 
(define-constant HPDF_LANG_TH (c "SCM_MAKE_STR(HPDF_LANG_TH)")) ;; Thai 
(define-constant HPDF_LANG_TI (c "SCM_MAKE_STR(HPDF_LANG_TI)")) ;; Tigrinya 
(define-constant HPDF_LANG_TK (c "SCM_MAKE_STR(HPDF_LANG_TK)")) ;; Turkmen 
(define-constant HPDF_LANG_TL (c "SCM_MAKE_STR(HPDF_LANG_TL)")) ;; Tagalog 
(define-constant HPDF_LANG_TN (c "SCM_MAKE_STR(HPDF_LANG_TN)")) ;; Setswanato Tonga 
(define-constant HPDF_LANG_TR (c "SCM_MAKE_STR(HPDF_LANG_TR)")) ;; Turkish 
(define-constant HPDF_LANG_TS (c "SCM_MAKE_STR(HPDF_LANG_TS)")) ;; Tsonga 
(define-constant HPDF_LANG_TT (c "SCM_MAKE_STR(HPDF_LANG_TT)")) ;; Tatar 
(define-constant HPDF_LANG_TW (c "SCM_MAKE_STR(HPDF_LANG_TW)")) ;; Twi 
(define-constant HPDF_LANG_UK (c "SCM_MAKE_STR(HPDF_LANG_UK)")) ;; Ukrainian 
(define-constant HPDF_LANG_UR (c "SCM_MAKE_STR(HPDF_LANG_UR)")) ;; Urdu 
(define-constant HPDF_LANG_UZ (c "SCM_MAKE_STR(HPDF_LANG_UZ)")) ;; Uzbek 
(define-constant HPDF_LANG_VI (c "SCM_MAKE_STR(HPDF_LANG_VI)")) ;; Vietnamese 
(define-constant HPDF_LANG_VO (c "SCM_MAKE_STR(HPDF_LANG_VO)")) ;; Volapuk 
(define-constant HPDF_LANG_WO (c "SCM_MAKE_STR(HPDF_LANG_WO)")) ;; Wolof 
(define-constant HPDF_LANG_XH (c "SCM_MAKE_STR(HPDF_LANG_XH)")) ;; Xhosa 
(define-constant HPDF_LANG_YO (c "SCM_MAKE_STR(HPDF_LANG_YO)")) ;; Yoruba 
(define-constant HPDF_LANG_ZH (c "SCM_MAKE_STR(HPDF_LANG_ZH)")) ;; Chinese
(define-constant HPDF_LANG_ZU (c "SCM_MAKE_STR(HPDF_LANG_ZU)")) ;; Zulu

;; Graphic mode
(define-enum HPDF_GMODE_PAGE_DESCRIPTION)
(define-enum HPDF_GMODE_PATH_OBJECT)
(define-enum HPDF_GMODE_TEXT_OBJECT)
(define-enum HPDF_GMODE_CLIPPING_PATH)
(define-enum HPDF_GMODE_SHADING)
(define-enum HPDF_GMODE_INLINE_IMAGE)
(define-enum HPDF_GMODE_EXTERNAL_OBJECT)

;; from hpdf_error.h
(define-enum HPDF_ARRAY_COUNT_ERR)
(define-enum HPDF_ARRAY_ITEM_NOT_FOUND)
(define-enum HPDF_ARRAY_ITEM_UNEXPECTED_TYPE)
(define-enum HPDF_BINARY_LENGTH_ERR)
(define-enum HPDF_CANNOT_GET_PALLET)
(define-enum HPDF_DICT_COUNT_ERR)
(define-enum HPDF_DICT_ITEM_NOT_FOUND)
(define-enum HPDF_DICT_ITEM_UNEXPECTED_TYPE)
(define-enum HPDF_DICT_STREAM_LENGTH_NOT_FOUND)
(define-enum HPDF_DOC_ENCRYPTDICT_NOT_FOUND)
(define-enum HPDF_DOC_INVALID_OBJECT)
(define-enum HPDF_DUPLICATE_REGISTRATION)
(define-enum HPDF_EXCEED_JWW_CODE_NUM_LIMIT)
(define-enum HPDF_ENCRYPT_INVALID_PASSWORD)
(define-enum HPDF_ERR_UNKNOWN_CLASS)
(define-enum HPDF_EXCEED_GSTATE_LIMIT)
(define-enum HPDF_FAILD_TO_ALLOC_MEM)
(define-enum HPDF_FILE_IO_ERROR)
(define-enum HPDF_FILE_OPEN_ERROR)
(define-enum HPDF_FONT_EXISTS)
(define-enum HPDF_FONT_INVALID_WIDTHS_TABLE)
(define-enum HPDF_INVALID_AFM_HEADER)
(define-enum HPDF_INVALID_ANNOTATION)
(define-enum HPDF_INVALID_BIT_PER_COMPONENT)
(define-enum HPDF_INVALID_CHAR_MATRICS_DATA)
(define-enum HPDF_INVALID_COLOR_SPACE)
(define-enum HPDF_INVALID_COMPRESSION_MODE)
(define-enum HPDF_INVALID_DATE_TIME)
(define-enum HPDF_INVALID_DESTINATION)
(define-enum HPDF_INVALID_DOCUMENT)
(define-enum HPDF_INVALID_DOCUMENT_STATE)
(define-enum HPDF_INVALID_ENCODER)
(define-enum HPDF_INVALID_ENCODER_TYPE)
(define-enum HPDF_INVALID_ENCODING_NAME)
(define-enum HPDF_INVALID_ENCRYPT_KEY_LEN)
(define-enum HPDF_INVALID_FONTDEF_DATA)
(define-enum HPDF_INVALID_FONTDEF_TYPE)
(define-enum HPDF_INVALID_FONT_NAME)
(define-enum HPDF_INVALID_IMAGE)
(define-enum HPDF_INVALID_JPEG_DATA)
(define-enum HPDF_INVALID_N_DATA)
(define-enum HPDF_INVALID_OBJECT)
(define-enum HPDF_INVALID_OBJ_ID)
(define-enum HPDF_INVALID_OPERATION)
(define-enum HPDF_INVALID_OUTLINE)
(define-enum HPDF_INVALID_PAGE)
(define-enum HPDF_INVALID_PAGES)
(define-enum HPDF_INVALID_PARAMETER)
(define-enum HPDF_INVALID_PNG_IMAGE)
(define-enum HPDF_INVALID_STREAM)
(define-enum HPDF_MISSING_FILE_NAME_ENTRY)
(define-enum HPDF_INVALID_TTC_FILE)
(define-enum HPDF_INVALID_TTC_INDEX)
(define-enum HPDF_INVALID_WX_DATA)
(define-enum HPDF_ITEM_NOT_FOUND)
(define-enum HPDF_LIBPNG_ERROR)
(define-enum HPDF_NAME_INVALID_VALUE)
(define-enum HPDF_NAME_OUT_OF_RANGE)
(define-enum HPDF_PAGE_INVALID_PARAM_COUNT)
(define-enum HPDF_PAGES_MISSING_KIDS_ENTRY)
(define-enum HPDF_PAGE_CANNOT_FIND_OBJECT)
(define-enum HPDF_PAGE_CANNOT_GET_ROOT_PAGES)
(define-enum HPDF_PAGE_CANNOT_RESTORE_GSTATE)
(define-enum HPDF_PAGE_CANNOT_SET_PARENT)
(define-enum HPDF_PAGE_FONT_NOT_FOUND)
(define-enum HPDF_PAGE_INVALID_FONT)
(define-enum HPDF_PAGE_INVALID_FONT_SIZE)
(define-enum HPDF_PAGE_INVALID_GMODE)
(define-enum HPDF_PAGE_INVALID_INDEX)
(define-enum HPDF_PAGE_INVALID_ROTATE_VALUE)
(define-enum HPDF_PAGE_INVALID_SIZE)
(define-enum HPDF_PAGE_INVALID_XOBJECT)
(define-enum HPDF_PAGE_OUT_OF_RANGE)
(define-enum HPDF_REAL_OUT_OF_RANGE)
(define-enum HPDF_STREAM_EOF)
(define-enum HPDF_STREAM_READLN_CONTINUE)
(define-enum HPDF_STRING_OUT_OF_RANGE)
(define-enum HPDF_THIS_FUNC_WAS_SKIPPED)
(define-enum HPDF_TTF_CANNOT_EMBEDDING_FONT)
(define-enum HPDF_TTF_INVALID_CMAP)
(define-enum HPDF_TTF_INVALID_FOMAT)
(define-enum HPDF_TTF_MISSING_TABLE)
(define-enum HPDF_UNSUPPORTED_FONT_TYPE)
(define-enum HPDF_UNSUPPORTED_FUNC)
(define-enum HPDF_UNSUPPORTED_JPEG_FORMAT)
(define-enum HPDF_UNSUPPORTED_TYPE1_FONT)
(define-enum HPDF_XREF_COUNT_ERR)
(define-enum HPDF_ZLIB_ERROR)
(define-enum HPDF_INVALID_PAGE_INDEX)
(define-enum HPDF_INVALID_URI)
(define-enum HPDF_PAGE_LAYOUT_OUT_OF_RANGE)
(define-enum HPDF_PAGE_MODE_OUT_OF_RANGE)
(define-enum HPDF_PAGE_NUM_STYLE_OUT_OF_RANGE)
(define-enum HPDF_ANNOT_INVALID_ICON)
(define-enum HPDF_ANNOT_INVALID_BORDER_STYLE)
(define-enum HPDF_PAGE_INVALID_DIRECTION)
(define-enum HPDF_INVALID_FONT)
(define-enum HPDF_PAGE_INSUFFICIENT_SPACE)
(define-enum HPDF_PAGE_INVALID_DISPLAY_TIME)
(define-enum HPDF_PAGE_INVALID_TRANSITION_TIME)
(define-enum HPDF_INVALID_PAGE_SLIDESHOW_TYPE)
(define-enum HPDF_EXT_GSTATE_OUT_OF_RANGE)
(define-enum HPDF_INVALID_EXT_GSTATE)
(define-enum HPDF_EXT_GSTATE_READ_ONLY)

;; enum HPDF_PageMode
(define-enum HPDF_PAGE_MODE_USE_NONE)
(define-enum HPDF_PAGE_MODE_USE_OUTLINE)
(define-enum HPDF_PAGE_MODE_USE_THUMBS)
(define-enum HPDF_PAGE_MODE_FULL_SCREEN)
(define-enum HPDF_PAGE_MODE_EOF)

;; enum HPDF_PageSizes
(define-enum HPDF_PAGE_SIZE_LETTER)
(define-enum HPDF_PAGE_SIZE_LEGAL)
(define-enum HPDF_PAGE_SIZE_A3)
(define-enum HPDF_PAGE_SIZE_A4)
(define-enum HPDF_PAGE_SIZE_A5)
(define-enum HPDF_PAGE_SIZE_B4)
(define-enum HPDF_PAGE_SIZE_B5)
(define-enum HPDF_PAGE_SIZE_EXECUTIVE)
(define-enum HPDF_PAGE_SIZE_US4x6)
(define-enum HPDF_PAGE_SIZE_US4x8)
(define-enum HPDF_PAGE_SIZE_US5x7)
(define-enum HPDF_PAGE_SIZE_COMM10)
(define-enum HPDF_PAGE_SIZE_EOF)
;; alias
(define-enum LETTER)
(define-enum LEGAL)
(define-enum A3)
(define-enum A4)
(define-enum A5)
(define-enum B4)
(define-enum B5)
(define-enum EXECUTIVE)
(define-enum US4x6)
(define-enum US4x8)
(define-enum US5x7)
(define-enum COMM10)

(define-enum HPDF_PAGE_PORTRAIT)
(define-enum HPDF_PAGE_LANDSCAPE)

;; enum HPDF_InfoType
(define-enum HPDF_INFO_CREATION_DATE)
(define-enum HPDF_INFO_MOD_DATE)
(define-enum HPDF_INFO_AUTHOR)
(define-enum HPDF_INFO_CREATOR)
(define-enum HPDF_INFO_PRODUCER)
(define-enum HPDF_INFO_TITLE)
(define-enum HPDF_INFO_SUBJECT)
(define-enum HPDF_INFO_KEYWORDS)
;; alias
(define-enum CREATION_DATE)
(define-enum MOD_DATE)
(define-enum AUTHOR)
(define-enum CREATOR)
(define-enum PRODUCER)
(define-enum TITLE)
(define-enum SUBJECT)
(define-enum KEYWORDS)

;; enum HPDF_PageSlideShow
(define-enum HPDF_TS_WIPE_RIGHT)
(define-enum HPDF_TS_WIPE_UP)
(define-enum HPDF_TS_WIPE_LEFT)
(define-enum HPDF_TS_WIPE_DOWN)
(define-enum HPDF_TS_BARN_DOORS_HORIZONTAL_OUT)
(define-enum HPDF_TS_BARN_DOORS_HORIZONTAL_IN)
(define-enum HPDF_TS_BARN_DOORS_VERTICAL_OUT)
(define-enum HPDF_TS_BARN_DOORS_VERTICAL_IN)
(define-enum HPDF_TS_BOX_OUT)
(define-enum HPDF_TS_BOX_IN)
(define-enum HPDF_TS_BLINDS_HORIZONTAL)
(define-enum HPDF_TS_BLINDS_VERTICAL)
(define-enum HPDF_TS_DISSOLVE)
(define-enum HPDF_TS_GLITTER_RIGHT)
(define-enum HPDF_TS_GLITTER_DOWN)
(define-enum HPDF_TS_GLITTER_TOP_LEFT_TO_BOTTOM_RIGHT)
(define-enum HPDF_TS_REPLACE)

;; Local variables:
;; mode: scheme
;; end:
