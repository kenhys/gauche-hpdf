;; -*- mode: scheme; coding:utf-8 -*-

;;;
;;; hpdf-graphics.stub
;;;

"
#include \"gauche-hpdf.h\"
#include <hpdf.h>
#include <hpdf_consts.h>
#include <hpdf_types.h>
#include <hpdf_objects.h>
"

(include "gauche-hpdf.types")

"typedef unsigned int uint;"
"typedef unsigned short int* uint16p;"
"typedef unsigned short int uint16;"

;;
;; Graphics
;;
(define-cproc hpdf-page-set-line-width
  (page::<hpdf-page> line_width::<real>) ::<hpdf-status>
  (body <ulong> "HPDF_Page_SetLineWidth(page->h, line_width);"))

(define-cproc hpdf-page-set-line-cap (page::<hpdf-page> cap::<hpdf-linecap>)
  (body <ulong> "HPDF_Page_SetLineCap(page->h, cap->h);"))

(define-cproc hpdf-page-set-line-join (page::<hpdf-page> join::<uint>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-get-stream-size\");"
        "switch (join) {"
        "case HPDF_MITER_JOIN:"
        "case HPDF_ROUND_JOIN:"
        "case HPDF_BEVEL_JOIN:"
        "  SCM_RESULT = HPDF_Page_SetLineJoin(page->h, join);"
        "  break;"
        "default:"
        "  /* error */"
        "  SCM_RESULT = 0;"
        "  Scm_Error(\"Invalid 2nd argument. it needs HPDF_MITER_JOIN or HPDF_ROUND_JOIN or HPDF_BEVEL_JOIN.\\n\");"
        "  break;"
        "}"))

(define-cproc hpdf-page-set-miter-limit (page::<hpdf-page> miter_limit::<float>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-page-set-miter-limit\");"
        "SCM_RESULT = HPDF_Page_SetMiterLimit(page->h, miter_limit);"))

;; FIXME
(define-cproc hpdf-page-set-dash
  (page::<hpdf-page> array phase::<uint>) ::<hpdf-status>
  (let* ([obj::ScmObj SCM_NIL]
	 [vec::ScmVector* NULL]
	 [num_param::uint 0])
    (.if DEBUG (GAUCHE_HPDF_FUNC "hpdf-page-set-dash"))
    (cond ([SCM_LISTP array]
	   (set! obj (Scm_ListToVector array 0 -1))
	   (set! vec (SCM_VECTOR obj))
	   (set! num_param (Scm_Length array)))
	  (else
	   (Scm_Error "list expected, but got")))
    (let* ([dash::uint16* (calloc (sizeof uint16) num_param)]
	   [i::int 0])
      (for [(set! i 0) (< i num_param) (post++ i)]
	   (set! (aref dash i) (Scm_VectorRef vec i SCM_NIL)))
      (result (HPDF_Page_SetDash (-> page h) dash num_param phase)))))

(define-cproc hpdf-page-set-flat (page::<hpdf-page> flatness::<float>)
  (expr <ulong> "HPDF_Page_SetFlat(page->h, flatness)"))

(define-cproc hpdf-page-setextgstate (page::<hpdf-page> ext_gstate::<hpdf-extgstate>)
  (expr <ulong> "HPDF_Page_SetExtGState(page->h, ext_gstate->h)"))

;; Special graphic state operator
(define-cproc hpdf-page-gsave 
  (page::<hpdf-page>) ::<hpdf-status>
  (result (HPDF_Page_GSave (-> page h))))

(define-cproc hpdf-page-grestore
  (page::<hpdf-page>) ::<hpdf-status>
  (result (HPDF_Page_GRestore (-> page h))))

(define-cproc hpdf-page-concat
  (page::<hpdf-page>
   a::<float>
   b::<float>
   c::<float>
   d::<float>
   x::<float>
   y::<float>) ::<hpdf-status>
   (result (HPDF_Page_Concat (-> page h) a b c d x y)))

;; Path construction operator
(define-cproc hpdf-page-moveto (page::<hpdf-page> x::<float> y::<float>)
  (body <ulong> "HPDF_Page_MoveTo(page->h, x, y);"))

(define-cproc hpdf-page-lineto (page::<hpdf-page> x::<float> y::<float>)
  (body <ulong> "HPDF_Page_LineTo(page->h, x, y);"))

(define-cproc hpdf-page-curveto (page::<hpdf-page> x1::<float> y1::<float> x2::<float> y2::<float> x3::<float> y3::<float>)
  (body <ulong> "HPDF_Page_CurveTo(page->h, x1, y1, x2, y2, x3, y3);"))

(define-cproc hpdf-page-curveto2 (page::<hpdf-page> x2::<float> y2::<float> x3::<float> y3::<float>)
  (body <ulong> "HPDF_Page_CurveTo2(page->h, x2, y2, x3, y3);"))

(define-cproc hpdf-page-curveto3 (page::<hpdf-page> x1::<float> y1::<float> x3::<float> y3::<float>)
  (body <ulong> "HPDF_Page_CurveTo2(page->h, x1, y1, x3, y3);"))

(define-cproc hpdf-page-close-path (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_ClosePath(page->h);"))

(define-cproc hpdf-page-rectangle (page::<hpdf-page> x::<float> y::<float> width::<float> height::<float>)
  (body <ulong> "HPDF_Page_Rectangle(page->h, x, y, width, height);"))

;; Path painting operator
(define-cproc hpdf-page-stroke (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_Stroke(page->h);"))

(define-cproc hpdf-page-close-path-stroke (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_ClosePathStroke(page->h);"))

(define-cproc hpdf-page-fill (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_Fill(page->h);"))

(define-cproc hpdf-page-eo-fill (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_Eofill(page->h);"))

(define-cproc hpdf-page-fill-stroke (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_FillStroke(page->h);"))

(define-cproc hpdf-page-eofill-stroke (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_EofillStroke(page->h);"))

(define-cproc hpdf-page-close-path-fill-stroke (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_ClosePathFillStroke(page->h);"))

(define-cproc hpdf-page-close-path-eofill-stroke (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_ClosePathEofillStroke(page->h);"))

(define-cproc hpdf-page-end-path (page::<hpdf-page>)
  (body <ulong> "HPDF_Page_EndPath(page->h);"))

;; Clipping paths operator
(define-cproc hpdf-page-clip (page::<hpdf-page>)
  (body <ulong> "SCM_RESULT = HPDF_Page_Clip(page->h);"))

(define-cproc hpdf-page-eoclip (page::<hpdf-page>)
  (expr <ulong> "HPDF_Page_Eoclip(page->h)"))


;; Color showing
(define-cproc hpdf-page-set-gray-fill (page::<hpdf-page> gray::<float>)
  (expr <ulong> "HPDF_Page_SetGrayFill(page->h, gray)"))

(define-cproc hpdf-page-set-gray-stroke (page::<hpdf-page> gray::<float>)
  (expr <ulong> "HPDF_Page_SetGrayStroke(page->h, gray)"))

(define-cproc hpdf-page-set-rgb-fill (page::<hpdf-page> r::<float> g::<float> b::<float>)
  (expr <ulong> "HPDF_Page_SetRGBFill(page->h, r, g, b)"))

(define-cproc hpdf-page-set-rgb-stroke (page::<hpdf-page> r::<float> g::<float> b::<float>)
  (expr <ulong> "HPDF_Page_SetRGBStroke(page->h, r, g, b)"))

(define-cproc hpdf-page-set-cmyk-fill (page::<hpdf-page> c::<float> m::<float> y::<float> k::<float>)
  (expr <ulong> "HPDF_Page_SetCMYKFill(page->h, c, m, y, k)"))

(define-cproc hpdf-page-set-cmyk-stroke (page::<hpdf-page> c::<float> m::<float> y::<float> k::<float>)
  (expr <ulong> "HPDF_Page_SetCMYKStroke(page->h, c, m, y, k)"))


(define-cproc hpdf-font-text-width (font::<hpdf-font> text::<const-cstring> len::<uint>)
  (body <hpdf-textwidth>
        "  ScmHpdfTextWidth *h = SCM_NEW(ScmHpdfTextWidth);
  SCM_SET_CLASS(h, SCM_CLASS_HPDFTEXTWIDTH);
  h->h = HPDF_Font_TextWidth(font->h, text, len);
  SCM_RESULT = h;"))

;;
;; GRAPHICS OPERATORS
;;
