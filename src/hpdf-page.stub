;;;
;;; hpdf-page.stub
;;;

"
#include \"gauche-hpdf.h\"
#include <hpdf.h>
#include <hpdf_consts.h>
#include <hpdf_types.h>
#include <hpdf_objects.h>
"

(include "gauche-hpdf.types")

;;
;; The following entry is a procedure
;;

;;
;; Layout Handling
;;
(define-cproc hpdf-get-page-layout (doc::<hpdf-doc>)
  (body <fixnum>
        "GAUCHE_HPDF_FUNC(\"hpdf-get-page-layout\");"
        "/* enum HPDF_PageLayout */"
        "SCM_RESULT = HPDF_GetPageLayout(doc->h);"))

(define-cproc hpdf-set-page-layout (doc::<hpdf-doc> layout::<fixnum>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-set-page-layout\");"
        "/* enum HPDF_PageLayout */"
        "switch (layout) {"
        "case HPDF_PAGE_LAYOUT_SINGLE:"
        "case HPDF_PAGE_LAYOUT_ONE_COLUMN:"
        "case HPDF_PAGE_LAYOUT_TWO_COLUMN_LEFT:"
        "case HPDF_PAGE_LAYOUT_TWO_COLUMN_RIGHT:"
        "  SCM_RESULT = HPDF_SetPageLayout(doc->h, layout);"
        "  break;"
        "default:"
        "  /* error */"
        "  Scm_Error(\"\");"
        "  break;"
        "}"
        ))

(define-cproc hpdf-get-page-mode (doc::<hpdf-doc>)
  (body <fixnum>
        "GAUCHE_HPDF_FUNC(\"hpdf-get-page-mode\");"
        "/* enum HPDF_PageMode */"
        "SCM_RESULT = HPDF_GetPageMode(doc->h);"))

(define-cproc hpdf-set-page-mode (doc::<hpdf-doc> mode::<fixnum>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-set-page-mode\");"
        "switch(mode) {"
        "case HPDF_PAGE_MODE_USE_NONE:"
        "case HPDF_PAGE_MODE_USE_OUTLINE:"
        "case HPDF_PAGE_MODE_USE_THUMBS:"
        "case HPDF_PAGE_MODE_FULL_SCREEN:"
        "  SCM_RESULT = HPDF_SetPageMode(doc->h, mode);"
        "  break;"
        "default:"
        "  Scm_Error(\"\");"
        "  break;"
        "}"))

(define-cproc hpdf-get-viewer-preference (doc::<hpdf-doc>)
  (body <uint>
        "GAUCHE_HPDF_FUNC(\"hpdf-get-viewer-preference\");"
        "SCM_RESULT = HPDF_GetViewerPreference(doc->h);"))

(define-cproc hpdf-set-viewer-preference (doc::<hpdf-doc> value::<uint>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-set-viewer-preference\");"
        "SCM_RESULT = HPDF_SetViewerPreference(doc->h, value);"))

(define-cproc hpdf-set-open-action (doc::<hpdf-doc> open_action::<hpdf-destination>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-set-open-action\");"
        "SCM_RESULT = HPDF_SetOpenAction(doc->h, open_action->h);"))


(define-enum HPDF_PAGE_SIZE_LETTER)
(define-enum HPDF_PAGE_SIZE_LEGAL)
(define-enum HPDF_PAGE_SIZE_A3)
(define-enum HPDF_PAGE_SIZE_A4)
(define-enum HPDF_PAGE_SIZE_A5)
(define-enum HPDF_PAGE_SIZE_B4)
(define-enum HPDF_PAGE_SIZE_B5)
(define-enum HPDF_PAGE_SIZE_EXECUTIVE)
(define-enum HPDF_PAGE_SIZE_US4x6)
(define-enum HPDF_PAGE_SIZE_US4x8)
(define-enum HPDF_PAGE_SIZE_US5x7)
(define-enum HPDF_PAGE_SIZE_COMM10)
(define-enum HPDF_PAGE_SIZE_EOF)

;; page handling

(define-cproc hpdf-get-current-page
  (doc::<hpdf-doc>) ::<hpdf-page>
  (let* ([page::ScmHpdfPage* (SCM_NEW ScmHpdfPage)]
	 [null (SCM_SET_CLASS page SCM_CLASS_HPDF_PAGE)]
	 )
    (set! (-> page h) (HPDF_GetCurrentPage (-> doc h)))
    (result page)))

(define-cproc hpdf-add-page
  (doc::<hpdf-doc>) ::<hpdf-page>
  (let* ([page::ScmHpdfPage* (SCM_NEW ScmHpdfPage)])
    (.if DEBUG (GAUCHE_HPDF_FUNC "hpdf-add-page"))
    (SCM_SET_CLASS page SCM_CLASS_HPDF_PAGE)
    (set! (-> page h) (HPDF_AddPage (-> doc h)))
    (result page)))

(define-cproc hpdf-insert-page
  (doc::<hpdf-doc> page::<hpdf-page>) ::<hpdf-page>
  (let* ([page2::ScmHpdfPage* (SCM_NEW ScmHpdfPage)])
    (.if DEBUG (GAUCHE_HPDF_FUNC "hpdf-insert-page"))
    (SCM_SET_CLASS page2 SCM_CLASS_HPDF_PAGE)
    (set! (-> page2 h) (HPDF_InsertPage (-> doc h) (-> page h)))
    (result page2)))

(define-cproc hpdf-page-set-width (page::<hpdf-page> v::<float>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-page-set-width\");"
        "SCM_RESULT = HPDF_Page_SetWidth(page->h, v);"))

(define-cproc hpdf-page-set-height (page::<hpdf-page> v::<float>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-page-set-height\");"
        "HPDF_Page_SetHeight(page->h, v);"))

(define-cproc hpdf-page-set-size
  (page::<hpdf-page> size direction::<fixnum>) ::<hpdf-status>
  (let* ()
    (GAUCHE_HPDF_FUNC "hpdf-page-set-size")
    (case (SCM_INT_VALUE size)
      ([HPDF_PAGE_SIZE_LETTER
	HPDF_PAGE_SIZE_LEGAL
	HPDF_PAGE_SIZE_A3
	HPDF_PAGE_SIZE_A4
	HPDF_PAGE_SIZE_A5
	HPDF_PAGE_SIZE_B4
	HPDF_PAGE_SIZE_B5
	HPDF_PAGE_SIZE_EXECUTIVE
	HPDF_PAGE_SIZE_US4x6
	HPDF_PAGE_SIZE_US4x8
	HPDF_PAGE_SIZE_US5x7
	HPDF_PAGE_SIZE_COMM10] size)
      (else 
       (Scm_Error "Invalid 2nd argument. it needs HPDF_PageSizes.\n")))
    (case direction
      ([HPDF_PAGE_PORTRAIT HPDF_PAGE_LANDSCAPE] direction)
      (else 
       (Scm_Error "Invalid 3rd argument. it needs HPDF_PAGE_LANDSCAPE or HPDF_PAGE_PORTRAIT.\n")))
    (result (HPDF_Page_SetSize (-> page h) (SCM_INT_VALUE size) direction))))

(define-cproc hpdf-page-set-rotate (page::<hpdf-page> angle::<uint16>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-page-set-rotate\");"
        "HPDF_Page_SetRotate(page->h, angle);"))

(define-cproc hpdf-page-set-zoom
  (page::<hpdf-page> zoom::<float>) ::<hpdf-status>
  (result (HPDF_Page_SetZoom (-> page h) zoom)))



;; Local variables:
;; mode: scheme
;; end:
