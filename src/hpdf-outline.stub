;; -*- mode: scheme; coding:utf-8 -*-

"
#include \"gauche-hpdf.h\"
#include <hpdf.h>
#include <hpdf_consts.h>
#include <hpdf_types.h>
#include <hpdf_objects.h>
"

(include "gauche-hpdf.types")


;;
;; Outline
;;
(define-cproc hpdf-create-outline
  (doc::<hpdf-doc> 
   parent
   title::<const-cstring> encoder) ::<hpdf-outline>
   (let* ([ol::ScmHpdfOutline* (SCM_NEW ScmHpdfOutline)]
	  [pol::ScmHpdfOutline* NULL]
	  [enc::ScmHpdfEncoder* NULL])
     (.if DEBUG (GAUCHE_HPDF_FUNC "hpdf-create-outline"))
     (SCM_SET_CLASS ol SCM_CLASS_HPDF_OUTLINE)
     (cond ([and (SCM_BOOLP parent) (SCM_BOOLP encoder)]
	    ;; FIXME just ignore parent and encoder
	    (set! (-> ol h)
		  (HPDF_CreateOutline (-> doc h) NULL title NULL)))
	   ([SCM_HPDF_OUTLINE_P parent]
	    (set! pol (SCM_HPDF_OUTLINE parent))
	    (set! enc (SCM_HPDF_ENCODER encoder))
	    (if parent
		(if encoder
		    (set! (-> ol h)
			  (HPDF_CreateOutline (-> doc h) (-> pol h)
					      title (-> enc h)))
		    (set! (-> ol h)
			  (HPDF_CreateOutline (-> doc h) (-> pol h)
					      title NULL)))
		(if encoder
		    (set! (-> ol h) (HPDF_CreateOutline (-> doc h) NULL
							title (-> enc h)))
		    (set! (-> ol h) (HPDF_CreateOutline (-> doc h) NULL title NULL)))))
	   (else 
	    ;; default fallback
	    (set! (-> ol h) (HPDF_CreateOutline (-> doc h) NULL "" NULL))))
     (result ol)))

(define-cproc hpdf-outline-set-opened
  (out::<hpdf-outline> opened) ::<ulong>
  (let* ([mode::int 0])
    (.if DEBUG
	(GAUCHE_HPDF_FUNC "hpdf-set-opened"))
    (cond ([SCM_BOOLP opened]
	   (set! mode (SCM_INT_VALUE opened)))

	  ([SCM_INTEGERP opened]
	   (set! mode (SCM_INT_VALUE opened)))
	  (else
	   ;; default fallback
	   (set! mode 0)))
    (result (HPDF_Outline_SetOpened (-> out h) mode))))

(define-cproc hpdf-outline-set-destination
  (out::<hpdf-outline> dst::<hpdf-destination>) ::<ulong>
  (let* ()
    (.if DEBUG
	 (GAUCHE_HPDF_FUNC "hpdf-set-destination"))
    (result (HPDF_Outline_SetDestination (-> out h) (-> dst h)))))

;; Local variables:
;; mode: scheme
;; end:
