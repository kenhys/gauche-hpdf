;;;
;;; hpdf-text.stub
;;;

"
#include \"gauche-hpdf.h\"
#include <hpdf.h>
"

(include "gauche-hpdf.types")

;;
;; The following entry is a procedure
;;


;;
;;
;;

;;
;; Graphics
;;
;; Text object operator
;; BT
(define-cproc hpdf-page-begin-text (page::<hpdf-page>)
  (expr <ulong> "HPDF_Page_BeginText(page->h)"))

;; ET
(define-cproc hpdf-page-end-text (page::<hpdf-page>)
  (expr <ulong> "HPDF_Page_EndText(page->h)"))

;; Text state
(define-cproc hpdf-page-set-char-space (page::<hpdf-page> value::<float>)
  (expr <ulong> "HPDF_Page_SetCharSpace(page->h, value)"))

(define-cproc hpdf-page-setwordspace (page::<hpdf-page> value::<float>)
  (expr <ulong> "HPDF_Page_SetWordSpace(page->h, value)"))

(define-cproc hpdf-page-set-horizontal-scalling (page::<hpdf-page> value::<float>)
  (expr <ulong> "HPDF_Page_SetWordSpace(page->h, value)"))

(define-cproc hpdf-page-set-text-leading (page::<hpdf-page> value::<float>)
  (expr <ulong> "HPDF_Page_SetTextLeading(page->h, value)"))

(define-cproc hpdf-page-set-font-and-size
  (page::<hpdf-page> font::<hpdf-font> size::<float>) ::<ulong>
  (let* ()
    "GAUCHE_HPDF_FUNC(\"hpdf-page-set-font-and-size\");"
    (result (HPDF_Page_SetFontAndSize (-> page h) (-> font h) size))))

(define-cproc hpdf-page-set-text-rendering-mode (page::<hpdf-page> mode::<uint>)
  (expr <ulong> "HPDF_Page_SetTextRenderingMode(page->h, mode)"))

(define-cproc hpdf-page-set-text-rise (page::<hpdf-page> value::<float>)
  (expr <ulong> "HPDF_Page_SetTextRise(page->h, value)"))

;; Text positioning 
(define-cproc hpdf-page-move-text-pos
  (page::<hpdf-page> x::<float> y::<float>) ::<ulong>
  (result (HPDF_Page_MoveTextPos (-> page h) x y)))

(define-cproc hpdf-page-move-text-pos2 (page::<hpdf-page> x::<float> y::<float>)
  (expr <ulong> "HPDF_Page_MoveTextPos2(page->h, x, y)"))

(define-cproc hpdf-page-set-text-matrix (page::<hpdf-page> a::<float> b::<float> c::<float> d::<float> x::<float> y::<float>)
  (expr <ulong> "HPDF_Page_SetTextMatrix(page->h, a, b, c, d, x, y)"))

(define-cproc hpdf-page-move-to-nextline (page::<hpdf-page>)
  (expr <ulong> "HPDF_Page_MoveToNextLine(page->h)"))
  
;; Text showing
(define-cproc hpdf-page-show-text
  (page::<hpdf-page> text::<const-cstring>) ::<ulong>
  (result (HPDF_Page_ShowText (-> page h) text)))

;; (body <ulong>
;;         "GAUCHE_HPDF_FUNC(\"hpdf-page-show-text\");"
;;         "#ifdef GAUCHE_HPDF_DEBUG"
;;         "char dummy[20];"
;;         "int i = 0;"
;;         "dummy[i] = 0x83;i++;"
;;         "dummy[i] = 0x41;i++;"
;;         "dummy[i] = 0x83;i++;"
;;         "dummy[i] = 0x81;i++;"
;;         "dummy[i] = 0x83;i++;"
;;         "dummy[i] = 0x93;i++;"
;;         "dummy[i] = 0x83;i++;"
;;         "dummy[i] = 0x7b;i++;"
;;         "dummy[i] = 0x90;i++;"
;;         "dummy[i] = 0xd4;i++;"
;;         "dummy[i] = 0;i++;"
;;         "dummy[i] = 0;i++;"
;;         "dummy[i] = 0;i++;"
;;         "i = 0;"
;;         "char *p = text;"
;;         "fprintf(stderr, \"text entry:\", text);"
;;         "while (i < 20) {"
;;         "  fprintf(stderr, \"hex: 0x%02x int:%6d\\n\", text[i], text[i]);"
;;         "  i++;"
;;         "}"
;;         "i = 0;"
;;         "fprintf(stderr, \"dummy entry:\", dummy);"
;;         "while (i < 20) {"
;;         "  fprintf(stderr, \"hex: 0x%02x int:%6d\\n\", dummy[i], dummy[i]);"
;;         "  i++;"
;;         "}"
;;         "#endif"
;;         "if (strlen(text) > 0) {"
;;         "  SCM_RESULT = HPDF_Page_ShowText(page->h, text);"
;;         "} else {"
;;         "  SCM_RESULT = 0;"
;;         "}"
;;         ))

(define-cproc hpdf-page-show-text-next-line (page::<hpdf-page> text::<const-cstring>)
  (expr <ulong> "HPDF_Page_ShowTextNextLine(page->h, text)"))

(define-cproc hpdf-page-show-text-next-line-ex (page::<hpdf-page> word_space::<float> char_space::<float> text::<const-cstring>)
  (expr <ulong> "HPDF_Page_ShowTextNextLineEx(page->h, word_space, char_space, text)"))

;; XObjects
(define-cproc hpdf-page-execute-xobject (page::<hpdf-page> obj::<hpdf-xobject>)
  (expr <ulong> "HPDF_Page_ExecuteXObject(page->h, obj->h)"))

(define-cproc hpdf-page-drawimage (page::<hpdf-page>) (body <float> ""))

(define-cproc hpdf-page-textout
  (page::<hpdf-page> xpos::<float> ypos::<float> text::<const-cstring>) ::<ulong>
  (let* ()
    (result (HPDF_Page_TextOut (-> page h) xpos ypos text))))


(define-cproc hpdf-page-text-rect (page::<hpdf-page>
                                   left::<float>
                                   top::<float>
                                   right::<float>
                                   bottom::<float>
                                   text::<const-cstring>
                                   align::<fixnum>
                                   )
  (body <uint>
        "unsigned int uint;"
        "int status;"
        "status = HPDF_Page_TextRect(page->h, left, top, right, bottom, text, align, &uint);"
        "SCM_RESULT = uint;"))


;;
;; Font Handling
;;
(define-cproc hpdf-get-font
  (doc::<hpdf-doc> name::<const-cstring>
		   enc::<const-cstring>) ::<hpdf-font>
  (let* ([font::ScmHpdfFont* (SCM_NEW ScmHpdfFont)])
    (SCM_SET_CLASS font SCM_CLASS_HPDF_FONT)
    (if (> (strlen enc) 0)
	(set! (-> font h) (HPDF_GetFont (-> doc h) name NULL))
	(set! (-> font h) (HPDF_GetFont (-> doc h) name NULL)))
    (result font)))

(define-cproc hpdf-load-type1-font-from-file (doc::<hpdf-doc> afm_file_name::<const-cstring> data_file_name::<const-cstring>)
  (body <const-cstring>?
        "GAUCHE_HPDF_FUNC(\"hpdf-load-type1-font-from-file\");"
        "/* afm, pfb*/"
        "SCM_RESULT = HPDF_LoadType1FontFromFile(doc->h, afm_file_name, data_file_name);"))

(define-cproc hpdf-load-ttf-font-from-file (doc::<hpdf-doc> file::<const-cstring> embedding::<boolean>)
  (body <const-cstring>?
        "GAUCHE_HPDF_FUNC(\"hpdf-load-ttf-font-from-file\");"
        "const char *p = HPDF_LoadTTFontFromFile(doc->h, file, embedding);"
        "/* GAUCHE_HPDF_HEX('funcp', p);*/"
        "SCM_RESULT = p;"
        "if (p) {"
        "} else {"
        "  if (embedding) {"
        "     Scm_Error(\"can't load True Type Font(embedding %s) into PDF.\", file);"
        "  } else {"
        "     Scm_Error(\"can't load True Type Font(%s) into PDF.\", file);"
        "  }"
        "}"))

(define-cproc hpdf-load-ttf-font-from-file2 (doc::<hpdf-doc> file::<const-cstring> index::<uint> embedding::<boolean>)
  (body <const-cstring>?
        "GAUCHE_HPDF_FUNC(\"hpdf-load-ttf-font-from-file2\");"
        "SCM_RESULT = HPDF_LoadTTFontFromFile2(doc->h, file, index, embedding);"))

(define-cproc hpdf-add-page-label (doc::<hpdf-doc> page-num::<uint> page-style::<uint> first-page::<uint> prefix::<const-cstring>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-add-page-label\");"
        ""))

(define-cproc hpdf-use-jp-fonts (doc::<hpdf-doc>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-use-jp-fonts\");"
        "SCM_RESULT = HPDF_UseJPFonts(doc->h);"))

(define-cproc hpdf-use-kr-fonts (doc::<hpdf-doc>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-use-kr-fonts\");"
        "SCM_RESULT = HPDF_UseKRFonts(doc->h);"))

(define-cproc hpdf-use-cns-fonts (doc::<hpdf-doc>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-use-cns-fonts\");"
        "SCM_RESULT = HPDF_UseCNSFonts(doc->h);"))

(define-cproc hpdf-use-cnt-fonts (doc::<hpdf-doc>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-use-cnt-fonts\");"
        "SCM_RESULT = HPDF_UseCNTFonts(doc->h);"))

;;
;; Encoding Handler
;;
(define-cproc hpdf-get-encoder (doc::<hpdf-doc> encoding_name::<const-cstring>)
  (body <hpdf-encoder>
        "ScmHpdfEncoder *h = SCM_NEW(ScmHpdfEncoder);"
        "SCM_SET_CLASS(h, SCM_CLASS_HPDF_ENCODER);"
        "h->h = HPDF_GetEncoder(doc->h, encoding_name);"
        "SCM_RESULT = h;"))

(define-cproc hpdf-get-current-encoder (doc::<hpdf-doc>)
  (body <hpdf-encoder>
        "GAUCHE_HPDF_FUNC(\"hpdf-get-current-encoder\");"
        "ScmHpdfEncoder *h = SCM_NEW(ScmHpdfEncoder);"
        "SCM_SET_CLASS(h, SCM_CLASS_HPDF_ENCODER);"
        "h->h = HPDF_GetCurrentEncoder(doc->h);"
        "SCM_RESULT = h;"))

(define-cproc hpdf-set-current-encoder (doc::<hpdf-doc> encoding_name::<const-cstring>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-set-current-encoder\");"
        "SCM_RESULT = HPDF_SetCurrentEncoder(doc->h, encoding_name);"))

(define-cproc hpdf-encoder-get-type (enc::<hpdf-encoder>)
  (body <fixnum>
        "GAUCHE_HPDF_FUNC(\"hpdf-encoder-get-type\");"
        "SCM_RESULT = HPDF_Encoder_GetType(enc->h);"))

(define-cproc hpdf-encoder-get-byte-type (enc::<hpdf-encoder> text::<const-cstring> index::<uint>)
  (body <fixnum>
        "GAUCHE_HPDF_FUNC(\"hpdf-encoder-get-byte-type\");"
        "SCM_RESULT = HPDF_Encoder_GetByteType(enc->h, text, index);"))

(define-cproc hpdf-encoder-get-unicode (enc::<hpdf-encoder> code::<uint16>)
  (body <uint16> "SCM_RESULT = HPDF_Encoder_GetUnicode(enc->h, code);"))

(define-cproc hpdf-encoder-get-writing-mode (enc::<hpdf-encoder>)
  (body <fixnum> "SCM_RESULT = HPDF_Encoder_GetWritingMode(enc->h);"))

(define-cproc hpdf-use-jp-encodings (doc::<hpdf-doc>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-use-jp-encodings\");"
        "SCM_RESULT = HPDF_UseJPEncodings(doc->h);"))

(define-cproc hpdf-use-kr-encodings (doc::<hpdf-doc>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-use-kr-encodings\");"
        "SCM_RESULT = HPDF_UseKREncodings(doc->h);"))

(define-cproc hpdf-use-cns-encodings (doc::<hpdf-doc>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-use-cns-encodings\");"
        "SCM_RESULT = HPDF_UseCNSEncodings(doc->h);"))

(define-cproc hpdf-use-cnt-encodings (doc::<hpdf-doc>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-use-cnt-encodings\");"
        "SCM_RESULT = HPDF_UseCNTEncodings(doc->h);"))

;;
;; Annotation
;;
(define-cproc hpdf-page-create-text-annot (page::<hpdf-page> rect::<hpdf-rect> text::<const-cstring> encoder::<hpdf-encoder>)
  (body <hpdf-annotation>
        "GAUCHE_HPDF_FUNC(\"hpdf-page-create-text-annot\");"
        "ScmHpdfAnnotation *h = SCM_NEW(ScmHpdfAnnotation);"
        "SCM_SET_CLASS(h, SCM_CLASS_HPDF_ANNOTATION);"
        "h->h = HPDF_Page_CreateTextAnnot(page->h, rect->h, text, encoder->h);"
        "SCM_RESULT = h;"))

(define-cproc hpdf-page-create-link-annot (page::<hpdf-page> rect::<hpdf-rect> dst::<hpdf-destination>)
  (body <hpdf-annotation>
        "GAUCHE_HPDF_FUNC(\"hpdf-page-create-link-annot\");"
        "ScmHpdfAnnotation *h = SCM_NEW(ScmHpdfAnnotation);"
        "SCM_SET_CLASS(h, SCM_CLASS_HPDF_ANNOTATION);"
        "h->h = HPDF_Page_CreateLinkAnnot(page->h, rect->h, dst->h);"
        "SCM_RESULT = h;"))

(define-cproc hpdf-page-create-uri-link-annot (page::<hpdf-page> rect::<hpdf-rect> uri::<const-cstring>)
  (body <hpdf-annotation>
        "GAUCHE_HPDF_FUNC(\"hpdf-page-create-uri-link-annot\");"
        "ScmHpdfAnnotation *h = SCM_NEW(ScmHpdfAnnotation);"
        "SCM_SET_CLASS(h, SCM_CLASS_HPDF_ANNOTATION);"
        "h->h = HPDF_Page_CreateURILinkAnnot(page->h, rect->h, uri);"
        "SCM_RESULT = h;"))

(define-cproc hpdf-link-annot-set-highlight-mode (annot::<hpdf-annotation> mode::<fixnum>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-link-annot-set-highlight-mode\");"
        "SCM_RESULT = HPDF_LinkAnnot_SetHighlightMode (annot->h, mode);"))

(define-cproc hpdf-link-annot-set-border-style (annot::<hpdf-annotation> width::<float> dash_on::<uint16> dash_off::<uint16>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-link-annot-set-border-style\");"
        "SCM_RESULT = HPDF_LinkAnnot_SetBorderStyle (annot->h, width, dash_on, dash_off);"))

(define-cproc hpdf-text-annot-set-icon (annot::<hpdf-annotation> icon::<fixnum>)
  (body <ulong>
        "GAUCHE_HPDF_FUNC(\"hpdf-text-annot-set-icon\");"
        "SCM_RESULT = HPDF_TextAnnot_SetIcon (annot->h, icon);"))

(define-cproc hpdf-text-annot-set-opened (annot::<hpdf-annotation> opened::<boolean>)
  (body <ulong> "SCM_RESULT = HPDF_TextAnnot_SetOpened (annot->h, opened);"))

;; font
(define-cproc hpdf-font-get-font-name (font::<hpdf-font>)
  (body <const-cstring>?
        "GAUCHE_HPDF_FUNC(\"hpdf-font-get-font-name\");"
        "SCM_RESULT = HPDF_Font_GetFontName(font->h);"))

(define-cproc hpdf-font-get-encoding-name (font::<hpdf-font>)
  (body <const-cstring>
        "GAUCHE_HPDF_FUNC(\"hpdf-font-get-encoding-name\");"
        "SCM_RESULT = HPDF_Font_GetEncodingName(font->h);"))

(define-cproc hpdf-font-get-unicode-width (font::<hpdf-font> code::<uint16>)
  (body <int>
        "GAUCHE_HPDF_FUNC(\"hpdf-font-get-unicode-width\");"
        "SCM_RESULT = HPDF_Font_GetUnicodeWidth(font->h, code);"))

(define-cproc hpdf-font-get-bbox (font::<hpdf-font>)
  (body <hpdf-box>
        "GAUCHE_HPDF_FUNC(\"hpdf-font-get-bbox\");"
        "ScmHpdfBox *h = SCM_NEW(ScmHpdfBox);"
        "SCM_SET_CLASS(h, SCM_CLASS_HPDF_BOX);"
        "h->h = HPDF_Font_GetBBox(font->h);"
        "SCM_RESULT = h;"))

(define-cproc hpdf-font-get-ascent (font::<hpdf-font>)
  (expr <int> "SCM_RESULT = HPDF_Font_GetAscent(font->h)"))

(define-cproc hpdf-font-get-descent (font::<hpdf-font>)
  (expr <int> "SCM_RESULT = HPDF_Font_GetDescent(font->h)"))

(define-cproc hpdf-font-get-xheight (font::<hpdf-font>)
  (expr <uint> "SCM_RESULT = HPDF_Font_GetXHeight(font->h)"))

(define-cproc hpdf-font-get-cap-height (font::<hpdf-font>)
  (expr <uint> "SCM_RESULT = HPDF_Font_GetCapHeight(font->h)"))

(define-cproc hpdf-font-text-width (font::<hpdf-font> text::<const-cstring> len::<uint>)
  (body <hpdf-textwidth>
        "ScmHpdfTextWidth *h = SCM_NEW(ScmHpdfTextWidth);"
        "SCM_SET_CLASS(h, SCM_CLASS_HPDFTEXTWIDTH);"
        "h->h = HPDF_Font_TextWidth(font->h, text, len);"
        "SCM_RESULT = h;"))

;; FIXME utility function 
(define-cproc hpdf-font-text-width-as-list (text_width::<hpdf-textwidth>)
  (body <list>
        "SCM_RESULT = SCM_LIST3(SCM_MAKE_INT(text_width->h.numchars),"
        "SCM_MAKE_INT(text_width->h.width),"
        "SCM_MAKE_INT(text_width->h.numspace));"))

;; FIXME
(define-cproc hpdf-font-measure-text (font::<hpdf-font>
                                      text::<const-cstring>
                                      len::<uint> width::<float> font_size::<float>
                                      char_space::<float> word_space::<float> wordwrap::<float>
                                      )
  (body <float>
        "float real_width;"
        "#ifdef GAUCHE_HPDF_DEBUG"
        "fprintf(stderr,\"text:%s\\n\", text);"
        "fprintf(stderr,\"len:%d\\n\", len);"
        "fprintf(stderr,\"width:%lf\\n\", width);"
        "fprintf(stderr,\"font_size:%lf\\n\", font_size);"
        "fprintf(stderr,\"char_space:%lf\\n\", char_space);"
        "fprintf(stderr,\"word_space:%lf\\n\", word_space);"
        "fprintf(stderr,\"wordwrap:%lf\\n\", wordwrap);"
        "#endif"
        "HPDF_Font_MeasureText(font->h,"
        "text, len, width, font_size, char_space, word_space, wordwrap,"
        "&real_width);"
        "SCM_RESULT = real_width;"))

;; extended graphics state
(define-cproc hpdf-create-ext-gstate (doc::<hpdf-doc>)
  (body <hpdf-extgstate>
        "  ScmHpdfExtGState *h = SCM_NEW(ScmHpdfExtGState);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_EXTGSTATE);
  h->h = HPDF_CreateExtGState(doc->h);
  SCM_RESULT = h;"))

(define-cproc hpdf-ext-gstate-set-alpha-stroke (ext_gstate::<hpdf-extgstate> value::<float>)
  (expr <ulong> "HPDF_ExtGState_SetAlphaStroke(ext_gstate->h, value)"))

(define-cproc hpdf-ext-gstate-set-alpha-fill (ext_gstate::<hpdf-extgstate> value::<float>)
  (expr <ulong> "HPDF_ExtGState_SetAlphaFill(ext_gstate->h, value)"))

(define-cproc hpdf-ext-gstate-set-blend-mode (ext_gstate::<hpdf-extgstate> mode::<fixnum>)
  (expr <ulong> "HPDF_ExtGState_SetBlendMode(ext_gstate->h, mode)"))

;;
(define-cproc hpdf-page-text-width (page::<hpdf-page> text::<const-cstring>)
  (expr <float> "HPDF_Page_TextWidth(page->h, text)"))

"
/*

HPDF_EXPORT(HPDF_UINT)
HPDF_Page_MeasureText  (HPDF_Page    page,
                        const char  *text,
                        HPDF_REAL    width,
                        HPDF_BOOL    wordwrap,
                        HPDF_REAL   *real_width);

*/
"

(define-cproc hpdf-page-get-current-text-pos (page::<hpdf-page>)
  (body <hpdf-point>
        "  ScmHpdfPoint *h = SCM_NEW(ScmHpdfPoint);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_POINT);
  h->h = HPDF_Page_GetCurrentTextPos(page->h);
  SCM_RESULT = h;"))

;; FIXME
;; (define-cproc hpdf-page-get-current-text-pos2 (page::<hpdf-page> pos::<hpdf-point>)
;;   (body <ulong> "SCM_RESULT = HPDF_Page_GetCurrentTextPos2(page->h, pos->h);"))

(define-cproc hpdf-page-get-current-font (page::<hpdf-page>)
  (body <hpdf-font>
        "  ScmHpdfFont *h = SCM_NEW(ScmHpdfFont);"
        "SCM_SET_CLASS(h, SCM_CLASS_HPDF_FONT);"
        "h->h = HPDF_Page_GetCurrentFont(page->h);"
        "SCM_RESULT = h;"))

(define-cproc hpdf-page-get-current-font-size (page::<hpdf-page>)
  (expr <float>  "HPDF_Page_GetCurrentFontSize(page->h)"))

(define-cproc hpdf-page-get-transmatrix (page::<hpdf-page>)
  (body <hpdf-transmatrix>
        "  ScmHpdfTransMatrix *h = SCM_NEW(ScmHpdfTransMatrix);"
        "SCM_SET_CLASS(h, SCM_CLASS_HPDF_TRANSMATRIX);"
        "h->h = HPDF_Page_GetTransMatrix(page->h);"
        "SCM_RESULT = h;"))

(define-cproc hpdf-page-get-char-space (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetCharSpace(page->h)"))

(define-cproc hpdf-page-get-word-space (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetWordSpace(page->h)"))

(define-cproc hpdf-page-get-horizontal-scalling (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetHorizontalScalling(page->h)"))

(define-cproc hpdf-page-get-text-leading (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetTextLeading(page->h)"))

(define-cproc hpdf-page-get-text-rendering-mode (page::<hpdf-page>)
  (expr <fixnum> "HPDF_Page_GetTextRenderingMode(page->h)"))

;; obsolete
(define-cproc hpdf-page-get-text-raise (page::<hpdf-page>)
  (body <float>
        "Scm_Printf(SCM_CURERR, \"Warning: hpdf-page-get-text-raise is obsolete. use hpdf-page-get-text-rise instead.\");"
        "  SCM_RESULT = HPDF_Page_GetTextRaise(page->h);"))

(define-cproc hpdf-page-get-text-rise (page::<hpdf-page>)
  (expr <float> "HPDF_Page_GetTextRise(page->h)"))

(define-cproc hpdf-page-get-textmatrix (page::<hpdf-page>)
  (body <hpdf-transmatrix>
        "  ScmHpdfTransMatrix *h = SCM_NEW(ScmHpdfTransMatrix);
  SCM_SET_CLASS(h, SCM_CLASS_HPDF_TRANSMATRIX);
  h->h = HPDF_Page_GetTextMatrix(page->h);
  SCM_RESULT = h;"))

(define-cproc hpdf-page-get-gstate-depth (page::<hpdf-page>)
  (expr <uint> "HPDF_Page_GetGStateDepth(page->h)"))

;; Local variables:
;; mode: scheme
;; end:
